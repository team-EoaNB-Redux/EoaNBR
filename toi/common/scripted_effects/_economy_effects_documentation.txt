##################################################
## ECONOMY SCRIPTED EFFECTS FOR EOANB-R MODDERS ##
## - written & coded by Strat				   ##
##################################################

## INTRODUCTION ##
#	   This file is meant to be a full list of all scripted effects/functions that EoaNB-R modders can use in their focus trees, events, decisions,
#   scripted guis (if you are into that type of thing), or wherever else you have effects. Anywhere where the effects on the HOI4 wiki can be used, these
#   can be used as well

## BEFORE SCROLLING THROUGH THIS FILE ##
#	   This file is broken up by comments and indentation. If you are using VS-Code, I highly recommend going into your extensions (four boxes on the
#   left with one box detached) and searching up "Paradox Syntax" and installing it. That way, comments are colored green and so it is much easier to read
#   complicated files like this one with a lot of comments.
#
#	   I also highly recommend using a program which allows you to *hide* indented code. In VS-Code, if you hover over near where the line numbers are
#   on the left side next to an area that is indented, then a down arrow will appear which you can click to hide sections of this document. It is very handy
#   to sift through large files like this one.

## SOME OF THE CODE FOR THESE ARE PRETTY SIMPLE? ##
#	   Please, PLEASE, for the love of god or whatever you consider holy, if you do NOT know the internal workings of the eco system, USE THE EFFECTS IN THIS FILE AS THEY ARE SHOWN.
#   All necessary information is presented in this file and while there are safeguards to ensure that implementing an effect wrong will not break things, attempting to directly
#   implement effects yourself in your own code may result in breaking the system entirely, depending on what you're doing. Even if your name is Vanadium or Garion.
#
#	   Not only that, but it also makes your own files readable to other coders, which includes yourself at a later point when you're looking back at your own code wondering
#   what in the nine hells you created.
#
#	   And also, I might go back in to *edit* these effects if I learn that a specific use case breaks the system or implement more functionality for it. 
#   And if I learn that you're the reason why the eco is breaking, then there will be hell to pay.

## QUESTIONS? ##
#	   Ask me (Strattyboi on Discord) if you need help or are struggling to understand how to use a specific effect. I can always edit this file when needed to make things more clear.
#   Also, if you want me to add an effect or a functionality to an existing effect that you want, then please, ask me! I can implement it.




### ANY SCOPE ###

###

### STATE SCOPE ###
	## Industries ##

		# LIST OF BUILDING TOKENS:
			# Urban:
			#   building_port
			#   building_airport
			#
			#   building_military_industry
			#   building_civilian_industry
			#   building_naval_industry
			#
			#   building_consumer_goods_factory
			#   building_luxury_goods_factory
			#   building_industrial_goods_factory
			#   building_services_building
			#   building_power_plant
			#
			# Rural:
			#   building_infrastructure
			#   building_railway
			#
			#   building_rice_paddy		 NOTE: Not Interactable
			#   building_subsistence_farm   NOTE: Not Interactable
			#   building_commercial_farm
			#   building_food_plantation
			#   building_material_plantation
			#   building_luxuries_plantation
			#
			#   building_lumber_mill
			#   building_metals_mine
			#   building_coal_mine
			#   building_oil_well
			#   building_valuables_extractor
		#

		# LIST OF BUILDING PRODUCTION METHODS:
			# Roman Num.	Name (Year)					 ID
			# I			 Basic (Pre-Industrial)		  0
			# II			Advanced (1800s-1820s)		  1
			# III		   Industrialized (1830s-50s)	  2
			# IV			Mechanized (1860s-80s)		  3
			# V			 Electrified (1890s-1910s)	   4
			# VI			Motorized (1920s-40s)		   5
			# VII		   Modernized (1950s-60s)		  6
			# VIII		  Roboticized (1970s-80s)		 7
			# IX			Computerized (1990s-2000s)	  8
			# X			 Digitalized (2010s-2020s)	   9
			# XI			Automatized (2030s-2040s)	   10
			# XII		   Futurized (2050s)			   11
		#
		
		# Starts construction of the given industry type in the state. If provided a production/automation method that is too advanced (that you don't have tech for) 
		# or the building doesn't support, then it will auto adjust.
		# Negative values do NOT work. Will not do anything if given an invalid industry token for the state.
		construct_x_industries = {
			# x_temp 
			# financer_temp
			# industry_token
			# production_method_temp
			# automation_method_temp
			# no_cost_temp

			round_temp_variable = x_temp
			if = {
				limit = {
					check_variable = { x_temp = 0 }
				}
				set_temp_variable = { x_temp = 1 }
			}

			custom_effect_tooltip = construct_x_industries_tt

			if = {
				limit = {
					NOT = { is_in_array = { controller:building_unlocked_pms@var:industry_token = production_method_temp } }
				}
				set_temp_variable = { production_method_temp = controller:latest_production_method@var:industry_token }
			}
			if = {
				limit = {
					NOT = { is_in_array = { controller:building_unlocked_ams@var:industry_token = automation_method_temp } }
				}
				set_temp_variable = { automation_method_temp = controller:latest_automation_method@var:industry_token }
			}
			
			if = {
				limit = {
					is_in_array = { global.industry_token_array = industry_token }
					NOT = { check_variable = { global.building_unexpandable@var:industry_token = 1 } }
					check_variable = { x_temp > 0 }
				}
				hidden_effect = {
					construct_x_industries_no_update = yes
					var:controller = {
						var:market_leader = {
							market_update = yes
						}
						every_controlled_state = {
							industries_update = yes
							pops_update = yes
						}
					}
				}
			}
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { financer_temp = 0 }
			set_temp_variable = { industry_token = 0 }
			set_temp_variable = { production_method_temp = 0 }
			set_temp_variable = { automation_method_temp = 0 }
			set_temp_variable = { no_cost_temp = 0 }
			
		}

		# Removes x_temp buildings under construction. If there are no buildings under construction, then (unless the no_removal_temp var is set) this will function like remove_x_industries
		deconstruct_x_industries = {

		}

		# Adds x number of the given industry type in the state. If provided a production/automation method that is too advanced (that you don't have tech for) 
		# or the building doesn't support, then it will auto adjust.
		# Negative values do NOT work. Will not do anything if given an invalid industry token for the state.
		# Does NOT cost anything. financier_temp will simply end up being the owner
		add_x_industries = {
			# x_temp 
			# financer_temp
			# industry_token
			# production_method_temp
			# automation_method_temp
			# no_cost_temp


			round_temp_variable = x_temp
			if = {
				limit = {
					check_variable = { x_temp = 0 }
				}
				set_temp_variable = { x_temp = 1 }
			}

			custom_effect_tooltip = add_x_industries_tt

			if = {
				limit = {
					NOT = { is_in_array = { controller:building_unlocked_pms@var:industry_token = production_method_temp } }
				}
				set_temp_variable = { production_method_temp = controller:latest_production_method@var:industry_token }
			}
			if = {
				limit = {
					NOT = { is_in_array = { controller:building_unlocked_ams@var:industry_token = automation_method_temp } }
				}
				set_temp_variable = { automation_method_temp = controller:latest_automation_method@var:industry_token }
			}

			if = {
				limit = {
					is_in_array = { global.industry_token_array = industry_token }
					NOT = { check_variable = { global.building_unexpandable@var:industry_token = 1 } }
					check_variable = { x_temp > 0 }
					can_build_industry = yes
				}
				hidden_effect = {
					add_to_variable = { size@var:industry_token = x_temp }

					#Add building to array if it doesn't exist yet
					if = {
						limit = {
							NOT = { is_in_array = { industries = industry_token } }
						}
						add_to_array = { industries = industry_token }
						set_variable = { production_method@var:industry_token = production_method_temp }
						set_variable = { automation_method@var:industry_token = automation_method_temp }
					}
					refresh_construction_list = yes
					reload_industries_array = yes

					var:controller = {
						var:market_leader = {
							market_update = yes
						}
						every_controlled_state = {
							industries_update = yes
							pops_update = yes
						}
					}
					add_to_variable = { update_state_econ_window = 1 }
				}
			}
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { financer_temp = 0 }
			set_temp_variable = { industry_token = 0 }
			set_temp_variable = { production_method_temp = 0 }
			set_temp_variable = { automation_method_temp = 0 }
			set_temp_variable = { no_cost_temp = 0 }
		}

		# Removes X buildings from the state. Negative values do NOT work. Any building which reaches size 0 will be removed from the state.
		remove_x_industries = {
			round_temp_variable = x_temp
			if = {
				limit = {
					check_variable = { x_temp = 0 }
				}
				set_temp_variable = { x_temp = 1 }
			}
			custom_effect_tooltip = remove_x_industries_tt

			if = {
				limit = {
					is_in_array = { global.building_token_array = industry_token }
					check_variable = { x_temp > 0 }
				}
				if = {
					limit = {
						check_variable = { x_temp > size@var:industry_token }
					}
					set_variable = { size@var:industry_token = 0 }
				}
				else = {
					subtract_from_variable = { size@var:industry_token = x_temp }
				}

				if = { #Keeping the Building
					limit = {
						check_variable = { size@var:industry_token > 0 }
					}
				}
				else = { #Removing the Building
					set_temp_variable = { bu_token = industry_token }
					industry_update = yes

					remove_from_array = { buildings = industry_token }
					remove_from_array = { industries = industry_token }
				}
				
				industries_update = yes
				if = {
					limit = {
						check_variable = { money@var:industry_token > money_limit@var:industry_token }
					}
					set_variable = { money@var:industry_token = money_limit@var:industry_token }
				}

				industries_update_workforce = yes
				pops_workforce_update = yes
				industries_update = yes

				refresh_construction_list = yes
				reload_industries_array = yes

				var:controller = {
					var:market_leader = {
						market_update = yes
					}
					every_controlled_state = {
						industries_update = yes
						pops_update = yes
					}
				}
				add_to_variable = { update_state_econ_window = 1 }

				set_temp_variable = { bu_token = 0 }
			}
			
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { industry_token = 0 }
		}


	## Pops ## bb_20
		
	## Resources ## bb_30
	## Corporations ## bb_40

###

### COUNTRY SCOPE ###
	## Budget ## cc_10

		#   Adds or subtracts money to your treasury. Subtracting treasury beyond negatives will 
		#   add debt. Amount is relative to your government revenue.
		add_months_of_income = {
			multiply_temp_variable = { x_temp = revenue }
			if = {
				limit = {
					check_variable = { x_temp > 0 }
				}
				add_to_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_positive_tooltip
				}
			}
			else_if = {
				limit = {
					check_variable = { x_temp < 0 }
				}
				multiply_temp_variable = { x_temp = -1 }
				subtract_from_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_negative_tooltip
				}
			}

			hidden_effect = {
				if = {
					limit = {
						check_variable = { treasury < 0 }
					}
                    set_temp_variable = { x_temp = treasury }
                    multiply_temp_variable = { x_temp = -0.001 }
                    add_to_temp_variable = { x_temp = 0.001 }
                    set_temp_variable = { country_temp = 0 }
                    borrow_money = yes
				}
			}
			set_temp_variable = { x_temp = 0 }
		}
		
		# Adds or subtracts money to your treasury. Subtracting treasury beyond negatives will 
		# add debt
		add_treasury = {
			if = {
				limit = {
					check_variable = { x_temp > 0 }
				}
				add_to_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_positive_tooltip
				}
			}
			else_if = {
				limit = {
					check_variable = { x_temp < 0 }
				}
				multiply_temp_variable = { x_temp = -1 }
				subtract_from_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_negative_tooltip
				}
			}

			hidden_effect = {
				if = {
					limit = {
						check_variable = { treasury < 0 }
					}
                    set_temp_variable = { x_temp = treasury }
                    multiply_temp_variable = { x_temp = -0.001 }
                    add_to_temp_variable = { x_temp = 0.001 }
                    set_temp_variable = { country_temp = 0 }
                    borrow_money = yes
				}
			}
			set_temp_variable = { x_temp = 0 }
		}

		#   Adds a % of your yearly gdp to your treasury. 1.0 = 1.0%
		add_treasury_gdp = {
			multiply_temp_variable = { x_temp = 0.12 }
			multiply_temp_variable = { x_temp = gdp_amount }
			if = {
				limit = {
					check_variable = { x_temp > 0 }
				}
				add_to_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_positive_tooltip
				}
			}
			else_if = {
				limit = {
					check_variable = { x_temp < 0 }
				}
				multiply_temp_variable = { x_temp = -1 }
				subtract_from_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_negative_tooltip
				}
			}

			hidden_effect = {
				if = {
					limit = {
						check_variable = { treasury < 0 }
					}
                    set_temp_variable = { x_temp = treasury }
                    multiply_temp_variable = { x_temp = -0.001 }
                    add_to_temp_variable = { x_temp = 0.001 }
                    set_temp_variable = { country_temp = 0 }
                    borrow_money = yes
				}
			}
			set_temp_variable = { x_temp = 0 }
		}

		# print_money

		# set_interest_rate
		# change_interest_rate
		# add_inflation

		# add_loan
		# remove_loan
		# borrow_money
		# repay_debt
		# set_default
	## Trade ## cc_20
	## Economy ## cc_30
		improve_economic_situation = {
			if = {
				limit = {
					has_idea = free_fall
				}
				swap_ideas = {
					remove_idea = free_fall
					add_idea = depression
				}
			}
			else_if = {
				limit = {
					has_idea = depression
				}
				swap_ideas = {
					remove_idea = depression
					add_idea = recession
				}
			}
			else_if = {
				limit = {
					has_idea = recession
				}
				swap_ideas = {
					remove_idea = recession
					add_idea = stagnation
				}
			}
			else_if = {
				limit = {
					has_idea = stagnation
				}
				swap_ideas = {
					remove_idea = stagnation
					add_idea = steady_growth
				}
			}
			else_if = {
				limit = {
					has_idea = steady_growth
				}
				swap_ideas = {
					remove_idea = steady_growth
					add_idea = fast_growth
				}
			}
			else_if = {
				limit = {
					has_idea = fast_growth
				}
				swap_ideas = {
					remove_idea = fast_growth
					add_idea = economic_boom
				}
			}
		}
		worsen_economic_situation = {
			if = {
				limit = {
					has_idea = economic_boom
				}
				swap_ideas = {
					remove_idea = economic_boom
					add_idea = fast_growth
				}
			}
			else_if = {
				limit = {
					has_idea = fast_growth
				}
				swap_ideas = {
					remove_idea = fast_growth
					add_idea = steady_growth
				}
			}
			else_if = {
				limit = {
					has_idea = steady_growth
				}
				swap_ideas = {
					remove_idea = steady_growth
					add_idea = stagnation
				}
			}
			else_if = {
				limit = {
					has_idea = stagnation
				}
				swap_ideas = {
					remove_idea = stagnation
					add_idea = recession
				}
			}
			else_if = {
				limit = {
					has_idea = recession
				}
				swap_ideas = {
					remove_idea = recession
					add_idea = depression
				}
			}
			else_if = {
				limit = {
					has_idea = depression
				}
				swap_ideas = {
					remove_idea = depression
					add_idea = free_fall
				}
			}
		}
		set_economic_situation = {
			if = {
				limit = {
					has_idea = economic_boom
				}
				swap_ideas = {
					remove_idea = economic_boom
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = fast_growth
				}
				swap_ideas = {
					remove_idea = fast_growth
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = steady_growth
				}
				swap_ideas = {
					remove_idea = steady_growth
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = stagnation
				}
				swap_ideas = {
					remove_idea = stagnation
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = recession
				}
				swap_ideas = {
					remove_idea = recession
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = depression
				}
				swap_ideas = {
					remove_idea = depression
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = free_fall
				}
				swap_ideas = {
					remove_idea = free_fall
					add_idea = var:situation_temp
				}
			}
		}
		
		add_investment_fund = {
			add_to_variable = { var = investment_fund value = x_temp tooltip = investment_fund_change_positive_tooltip }
		}

		# proj_create
		# proj_cancel
		# proj_clear
		# proj_complete
	## Population ## cc_40
###