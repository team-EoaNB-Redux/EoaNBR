##################################################
## ECONOMY SCRIPTED EFFECTS FOR EOANB-R MODDERS ##
## - written & coded by Strat				   ##
##################################################

## INTRODUCTION ##
#	   This file is meant to be a full list of all scripted effects/functions that EoaNB-R modders can use in their focus trees, events, decisions,
#   scripted guis (if you are into that type of thing), or wherever else you have effects. Anywhere where the effects on the HOI4 wiki can be used, these
#   can be used as well

## BEFORE SCROLLING THROUGH THIS FILE ##
#	   This file is broken up by comments and indentation. If you are using VS-Code, I highly recommend going into your extensions (four boxes on the
#   left with one box detached) and searching up "Paradox Syntax" and installing it. That way, comments are colored green and so it is much easier to read
#   complicated files like this one with a lot of comments.
#
#	   I also highly recommend using a program which allows you to *hide* indented code. In VS-Code, if you hover over near where the line numbers are
#   on the left side next to an area that is indented, then a down arrow will appear which you can click to hide sections of this document. It is very handy
#   to sift through large files like this one.

## SOME OF THE CODE FOR THESE ARE PRETTY SIMPLE? ##
#	   Please, PLEASE, for the love of god or whatever you consider holy, if you do NOT know the internal workings of the eco system, USE THE EFFECTS IN THIS FILE AS THEY ARE SHOWN.
#   All necessary information is presented in this file and while there are safeguards to ensure that implementing an effect wrong will not break things, attempting to directly
#   implement effects yourself in your own code may result in breaking the system entirely, depending on what you're doing. Even if your name is Vanadium or Garion.
#
#	   Not only that, but it also makes your own files readable to other coders, which includes yourself at a later point when you're looking back at your own code wondering
#   what in the nine hells you created.
#
#	   And also, I might go back in to *edit* these effects if I learn that a specific use case breaks the system or implement more functionality for it. 
#   And if I learn that you're the reason why the eco is breaking, then there will be hell to pay.

## QUESTIONS? ##
#	   Ask me (Strattyboi on Discord) if you need help or are struggling to understand how to use a specific effect. I can always edit this file when needed to make things more clear.
#   Also, if you want me to add an effect or a functionality to an existing effect that you want, then please, ask me! I can implement it.




### ANY SCOPE ###

###

### STATE SCOPE ###
	## Industries ##
		
		# Starts construction of the given industry type in the state. If provided a production/automation method that is too advanced (that you don't have tech for) 
		# or the building doesn't support, then it will auto adjust.
		# Negative values do NOT work. Will not do anything if given an invalid industry token for the state.
		construct_x_industries = {
			# x_temp 
			# financer_temp
			# industry_token
			# production_method_temp
			# automation_method_temp
			# no_cost_temp

			round_temp_variable = x_temp
			if = {
				limit = {
					check_variable = { x_temp = 0 }
				}
				set_temp_variable = { x_temp = 1 }
			}

			custom_effect_tooltip = construct_x_industries_tt

			if = {
				limit = {
					NOT = { is_in_array = { controller:building_unlocked_pms@var:industry_token = production_method_temp } }
				}
				set_temp_variable = { production_method_temp = controller:latest_production_method@var:industry_token }
			}
			if = {
				limit = {
					NOT = { is_in_array = { controller:building_unlocked_ams@var:industry_token = automation_method_temp } }
				}
				set_temp_variable = { automation_method_temp = controller:latest_automation_method@var:industry_token }
			}
			
			if = {
				limit = {
					is_in_array = { global.industry_token_array = industry_token }
					NOT = { check_variable = { global.building_unexpandable@var:industry_token = 1 } }
					check_variable = { x_temp > 0 }
				}
				hidden_effect = {
					construct_x_industries_no_update = yes
					var:controller = {
						var:market_leader = {
							market_update = yes
						}
						every_controlled_state = {
							industries_update = yes
							pops_update = yes
						}
					}
				}
			}
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { financer_temp = 0 }
			set_temp_variable = { industry_token = 0 }
			set_temp_variable = { production_method_temp = 0 }
			set_temp_variable = { automation_method_temp = 0 }
			set_temp_variable = { no_cost_temp = 0 }
			
		}

		# Removes x_temp buildings under construction. If there are no buildings under construction, then (unless the no_removal_temp var is set) this will function like remove_x_industries
		deconstruct_x_industries = {

		}

		# Adds x number of the given industry type in the state. If provided a production/automation method that is too advanced (that you don't have tech for) 
		# or the building doesn't support, then it will auto adjust.
		# Negative values do NOT work. Will not do anything if given an invalid industry token for the state.
		# Does NOT cost anything. financier_temp will simply end up being the owner
		add_x_industries = {
			# x_temp 
			# financer_temp
			# industry_token
			# production_method_temp
			# automation_method_temp

			round_temp_variable = x_temp
			if = {
				limit = {
					check_variable = { x_temp = 0 }
				}
				set_temp_variable = { x_temp = 1 }
			}

			custom_effect_tooltip = add_x_industries_tt

			if = {
				limit = {
					NOT = { is_in_array = { controller:building_unlocked_pms@var:industry_token = production_method_temp } }
				}
				set_temp_variable = { production_method_temp = controller:latest_production_method@var:industry_token }
			}
			if = {
				limit = {
					NOT = { is_in_array = { controller:building_unlocked_ams@var:industry_token = automation_method_temp } }
				}
				set_temp_variable = { automation_method_temp = controller:latest_automation_method@var:industry_token }
			}

			if = {
				limit = {
					is_in_array = { global.industry_token_array = industry_token }
					NOT = { check_variable = { global.building_unexpandable@var:industry_token = 1 } }
					check_variable = { x_temp > 0 }
					can_build_industry = yes
				}
				hidden_effect = {
					add_x_industry_internal = yes
					refresh_construction_list = yes
					reload_industries_array = yes

					add_to_variable = { update_state_econ_window = 1 }
				}
			}
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { financer_temp = 0 }
			set_temp_variable = { industry_token = 0 }
			set_temp_variable = { production_method_temp = 0 }
			set_temp_variable = { automation_method_temp = 0 }
			set_temp_variable = { no_cost_temp = 0 }
		}

		# Removes X buildings from the state. Negative values do NOT work. Any building which reaches size 0 will be removed from the state.
		remove_x_industries = {
			round_temp_variable = x_temp
			if = {
				limit = {
					check_variable = { x_temp = 0 }
				}
				set_temp_variable = { x_temp = 1 }
			}
			custom_effect_tooltip = remove_x_industries_tt

			if = {
				limit = {
					is_in_array = { global.building_token_array = industry_token }
					check_variable = { x_temp > 0 }
				}
				multiply_temp_variable = { x_temp = -1 }
				add_x_industry_internal = yes

				# Update labor satisfaction (as this may have changed)
				industries_update_workforce = yes
				pops_workforce_update = yes
				industries_update = yes

				refresh_construction_list = yes
				reload_industries_array = yes

				add_to_variable = { update_state_econ_window = 1 }

				set_temp_variable = { bu_token = 0 }
			}
			
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { industry_token = 0 }
		}

		#	Adds deposits to the state - does not decrease known reserves or potential reserves
		add_x_deposit = {
			# r_token
			# x_temp
			# financer_temp
			# production_method_temp
			# automation_method_temp
			
			round_temp_variable = x_temp
			if = {
				limit = {
					is_in_array = { global.rgo_token_array = r_token }
					check_variable = { x_temp > 0 }
				}
				custom_effect_tooltip = add_x_deposits_tt

				hidden_effect = {
					if = {
						limit = {
							NOT = { is_in_array = { controller:building_unlocked_pms@var:r_token = production_method_temp } }
						}
						set_temp_variable = { production_method_temp = controller:latest_production_method@var:r_token }
					}
					if = {
						limit = {
							NOT = { is_in_array = { controller:building_unlocked_ams@var:r_token = automation_method_temp } }
						}
						set_temp_variable = { automation_method_temp = controller:latest_automation_method@var:r_token }
					}

					set_temp_variable = { deposit_temp = x_temp }
					add_rgo_internal = yes

					reload_industries_array = yes

					add_to_variable = { update_state_econ_window = 1 }
					set_temp_variable = { bu_token = 0 }
					set_temp_variable = { deposit_temp = 0 }
				}
			}
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { financer_temp = 0 }
			set_temp_variable = { r_token = 0 }
			set_temp_variable = { production_method_temp = 0 }
			set_temp_variable = { automation_method_temp = 0 }
		}

		remove_x_deposit = {
			# r_token
			# x_temp

			round_temp_variable = x_temp
			if = {
				limit = {
					is_in_array = { global.rgo_token_array = r_token }
					check_variable = { x_temp > 0 }
				}
				if = { limit = { check_variable = { x_temp > size@var:r_token } }
					set_temp_variable = { x_temp = size@var:r_token }
				}
				custom_effect_tooltip = remove_x_deposits_tt

				hidden_effect = {
					set_temp_variable = { deposit_temp = x_temp }
					multiply_temp_variable = { deposit_temp = -1 }
					add_rgo_internal = yes

					if = { limit = { check_variable = { x_temp < 0 } }
						# Update labor satisfaction (as this may have changed)
						industries_update_workforce = yes
						pops_workforce_update = yes
						industries_update = yes
					}

					reload_industries_array = yes

					add_to_variable = { update_state_econ_window = 1 }
					set_temp_variable = { bu_token = 0 }
					set_temp_variable = { deposit_temp = 0 }
				}
			}
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { r_token = 0 }
		}

		#	Adds known reserves to the state
		add_known_reserves = {
			# r_token
			# x_temp

			round_temp_variable = x_temp
			if = {
				limit = {
					is_in_array = { global.rgo_token_array = r_token }
					check_variable = { x_temp > 0 }
				}
				custom_effect_tooltip = add_x_known_reserves_tt
				set_temp_variable = { production_method_temp = controller:latest_production_method@var:r_token }
				set_temp_variable = { automation_method_temp = controller:latest_automation_method@var:r_token }

				set_temp_variable = { known_temp = x_temp }
				add_rgo_internal = yes

				reload_industries_array = yes

				add_to_variable = { update_state_econ_window = 1 }
				set_temp_variable = { bu_token = 0 }
				set_temp_variable = { known_temp = 0 }
			}
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { r_token = 0 }
		}
		#	Adds potential reserves to the state
		add_potential_reserves = {
			# r_token
			# x_temp

			round_temp_variable = x_temp
			if = {
				limit = {
					is_in_array = { global.rgo_token_array = r_token }
					check_variable = { x_temp > 0 }
				}
				custom_effect_tooltip = add_x_potential_reserves_tt
				set_temp_variable = { production_method_temp = controller:latest_production_method@var:r_token }
				set_temp_variable = { automation_method_temp = controller:latest_automation_method@var:r_token }

				set_temp_variable = { potential_temp = x_temp }
				add_rgo_internal = yes

				reload_industries_array = yes

				add_to_variable = { update_state_econ_window = 1 }
				set_temp_variable = { bu_token = 0 }
				set_temp_variable = { potential_temp = 0 }
			}
			set_temp_variable = { x_temp = 0 }
			set_temp_variable = { r_token = 0 }
		}

		open_industry = {

		}
		close_industry = {

		}

		start_upgrading_production_method = {

		}
		upgrade_production_method = {

		}
		start_upgrading_automation_method = {
			
		}
		upgrade_automation_method = {

		}

		#	arable_land_temp
		set_arable_land = {
			if = { limit = { check_variable = { arable_land_temp < 0 } }
				set_temp_variable = { arable_land_temp = 0 }
			}

			set_variable = { arable_land = arable_land_temp }
			
		}
		change_arable_land = {

		}


	## Pops ## bb_20

		#	Adds money to pops in the state
		inject_pop_stimulus = {

		}

		promote_workforce = {

		}
		add_population = {

		}
		migrate_population = {

		}
	
	# Removes X money from the investment fund and gives it to the state
	take_x_from_investment_fund = {

		set_temp_variable = { x_temp_stored = x_temp }
		add_treasury = yes

		set_temp_variable = { x_temp = x_temp_stored }
		add_investment_fund = yes
	
		set_temp_variable = { x_temp_stored = 0 }
		set_temp_variable = { x_temp = 0 }
	}

	# take_x_from_pops = {

	# }
		
	## Resources ## bb_30
	## Corporations ## bb_40

###

### COUNTRY SCOPE ###
	## Budget ## cc_10

		# 	Adds or subtracts money to your treasury. Subtracting treasury beyond negatives will 
		# 	add debt
		add_treasury = {
			if = {
				limit = {
					check_variable = { x_temp > 0 }
				}
				add_to_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_positive_tooltip
				}
			}
			else_if = {
				limit = {
					check_variable = { x_temp < 0 }
				}
				multiply_temp_variable = { x_temp = -1 }
				subtract_from_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_negative_tooltip
				}
			}

			hidden_effect = {
				if = {
					limit = {
						check_variable = { treasury < 0 }
					}
                    set_temp_variable = { x_temp = treasury }
                    multiply_temp_variable = { x_temp = -0.001 }
                    add_to_temp_variable = { x_temp = 0.001 }
                    set_temp_variable = { country_temp = 0 }
                    borrow_money = yes
				}
			}
			set_temp_variable = { x_temp = 0 }
		}

		#   Adds or subtracts money to your treasury. Subtracting treasury beyond negatives will 
		#   add debt. Amount is relative to your government revenue.
		add_months_of_income = {
			multiply_temp_variable = { x_temp = revenue }
			if = {
				limit = {
					check_variable = { x_temp > 0 }
				}
				add_to_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_positive_tooltip
				}
			}
			else_if = {
				limit = {
					check_variable = { x_temp < 0 }
				}
				multiply_temp_variable = { x_temp = -1 }
				subtract_from_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_negative_tooltip
				}
			}

			hidden_effect = {
				if = {
					limit = {
						check_variable = { treasury < 0 }
					}
                    set_temp_variable = { x_temp = treasury }
                    multiply_temp_variable = { x_temp = -0.001 }
                    add_to_temp_variable = { x_temp = 0.001 }
                    set_temp_variable = { country_temp = 0 }
                    borrow_money = yes
				}
			}
			set_temp_variable = { x_temp = 0 }
		}
		
		#   Adds a % of your yearly gdp to your treasury. 1.0 = 1.0%
		add_treasury_gdp = {
			multiply_temp_variable = { x_temp = 0.12 }
			multiply_temp_variable = { x_temp = gdp_amount }
			if = {
				limit = {
					check_variable = { x_temp > 0 }
				}
				add_to_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_positive_tooltip
				}
			}
			else_if = {
				limit = {
					check_variable = { x_temp < 0 }
				}
				multiply_temp_variable = { x_temp = -1 }
				subtract_from_variable = {
					var = treasury
					value = x_temp
					tooltip = treasury_change_negative_tooltip
				}
			}

			hidden_effect = {
				if = {
					limit = {
						check_variable = { treasury < 0 }
					}
                    set_temp_variable = { x_temp = treasury }
                    multiply_temp_variable = { x_temp = -0.001 }
                    add_to_temp_variable = { x_temp = 0.001 }
                    set_temp_variable = { country_temp = 0 }
                    borrow_money = yes
				}
			}
			set_temp_variable = { x_temp = 0 }
		}

		# 	Sets treasury to a certain amount. Setting it to a negative number will add debt.
		set_treasury = {
			subtract_from_temp_variable = { x_temp = treasury }

			add_treasury = yes
		}


		# print_money

		# set_interest_rate
		# change_interest_rate
		# add_inflation

		# 	Sets the debt to gdp % to x_temp (0-100)
		set_debt_to_gdp = {
			# x_temp

			multiply_temp_variable = { x_temp = 0.12 }
			add_to_temp_variable = { x_temp = 0.001 } # dunno why this is needed to make it exactly the percentage you give it, but apparently it is
			if = {
				limit = {
					check_variable = { x_temp > 1 }
				}
				divide_temp_variable = { x_temp = 1000 }
				multiply_temp_variable = { x_temp = gdp_amount }
			}
			else = {
				multiply_temp_variable = { x_temp = gdp_amount }
				divide_temp_variable = { x_temp = 1000 }
			}
			set_debt = yes
		}
		# 	Sets the debt to x_temp (thousands)
		set_debt = {
			# x_temp
			# country_temp
			
			if = {
				limit = { check_variable = { country_temp = 0 } }
				subtract_from_temp_variable = { x_temp = debt_to_bank_k@THIS }
			}
			else = {
				subtract_from_temp_variable = { x_temp = debt_to_bank_k@var:country_temp }
			}
			add_debt = yes
		}
		
		#	Adds debt without granting money. Automatically caps at the maximum amount you can borrow.
		add_debt = {
			#Scope: Country
			#INPUT:
				#x_temp - Amount of money to borrow in thousands.
				#country_temp - Which country to specifically borrow from, set to 0 to borrow money from any country
				#ignore_limits_temp - Ignores borrowing limits
				
			if = {
				limit = {
					check_variable = { x_temp > 0 }
				}

				set_temp_variable = { borrow_temp_k = x_temp }
				add_to_temp_variable = { 
					var = nonsense_var
					value = borrow_temp_k
					tooltip = debt_change_negative_tooltip
				}

				if = {
					limit = {
						check_variable = { country_temp = 0 }
					}
					set_temp_variable = { country_temp = THIS }
				}

				#log = "Country: [?country_temp.GetName]"

				if = {
					limit = {
						check_variable = { borrow_temp_k > country_temp:national_bank_amount_left_k }
						check_variable = { ignore_limits_temp = 0 }
					}
					set_temp_variable = { borrow_temp_k = country_temp:national_bank_amount_left_k }
				}
				#log = "Borrow Amount: [?borrow_temp_k]K"
				if = {
					limit = {
						check_variable = { borrow_temp_k < 0 }
					}
					set_temp_variable = { borrow_temp_k = 0 }
					set_temp_variable = { borrow_temp = 0 }
				}
				else = {
					set_temp_variable = { borrow_temp = borrow_temp_k }
					multiply_temp_variable = { borrow_temp = 1000 }
					if = {
						limit = {
							is_in_array = { array = debt_to_bank_country value = country_temp }
						}
						add_to_variable = { debt_to_bank_k@var:country_temp = borrow_temp_k }
						add_to_variable = { country_temp:money_lent_k@THIS = borrow_temp_k }
					}
					else = {
						add_to_array = { debt_to_bank_country = country_temp }
						set_variable = { debt_to_bank_k@var:country_temp = borrow_temp_k }
						add_to_array = { country_temp:money_lent_country = THIS }
						set_variable = { country_temp:money_lent_k@THIS = borrow_temp_k }
					}
					#log = "Debt to Bank K ([THIS.GetName]): [?debt_to_bank_k@var:country_temp]K"
					#log = "Money Lent K ([?country_temp.GetName]): [?country_temp:money_lent_k@THIS]K"

					if = {
						limit = {
							NOT = { check_variable = { country_temp = THIS } }
						}
						var:country_temp = {
							national_debt_update = yes
						}
					}
				}

				national_debt_update = yes
			}
			else_if = {
				limit = {
					check_variable = { x_temp < 0 }
				}
				multiply_temp_variable = { x_temp = -1 }
				remove_debt = yes
			}
			else = {
				set_temp_variable = { borrow_temp = 0 }
			}
			set_temp_variable = { ignore_limits_temp = 0 }
			set_temp_variable = { country_temp = 0 }
		}
		# 	Adds debt to gdp % at x_temp (0-100)
		add_debt_to_gdp = { 
			# x_temp

			multiply_temp_variable = { x_temp = 0.12 }
			multiply_temp_variable = { x_temp = gdp_amount }
			divide_temp_variable = { x_temp = 1000 }
			add_debt = yes
		}
		#	Removes oustanding debt.
		remove_debt = {
			#Scope: Country
			#INPUT:
				#x_temp - Amount of debt to repay. Non-integer amounts are accepted but integers are preferable
				#country_temp - Which country to specifically repay to, set to 0 to repay debts owed to any country
				#			  - If the repay amount is higher than the owed amount, only the owed amount is payed. The excess is not payed out further

			set_temp_variable = { debt_repayed_k = 0 }
			if = {
				limit = {
					check_variable = { x_temp > 0 }
				}

				#log = "Country: [?country_temp.GetName]"

				set_temp_variable = { repay_temp_k = x_temp }
				subtract_from_temp_variable = { 
					var = nonsense_var
					value = repay_temp_k
					tooltip = debt_change_positive_tooltip
				}

				if = {
					limit = {
						check_variable = { country_temp = 0 }
					}
					set_temp_variable = { country_temp = THIS }
					remove_debt_internal = yes
					add_to_temp_variable = { debt_repayed_k = repay_temp_k }

					set_temp_variable = { bank_temp = 0 }
					while_loop_effect = {
						limit = {
							check_variable = { debt_repayed_k < x_temp }
							check_variable = { debt_to_bank_country^num > 0 }
						}
						set_temp_variable = { repay_temp_k = x_temp }
						subtract_from_temp_variable = { repay_temp_k = debt_repayed_k }
						set_temp_variable = { country_temp = debt_to_bank_country^0 }
						remove_debt_internal = yes
						add_to_temp_variable = { debt_repayed_k = repay_temp_k }
					}
				}
				else = {
					remove_debt_internal = yes
					add_to_temp_variable = { debt_repayed_k = repay_temp_k }
				}


				national_debt_update = yes
			}
			set_temp_variable = { repay_temp = debt_repayed_k }
			multiply_temp_variable = { repay_temp = 1000 }
			set_temp_variable = { country_temp = 0 }
		}

		#	Borrows money. Automatically caps at the maximum amount you can borrow.
		borrow_money = {
			#Scope: Country
			#INPUT:
				#x_temp - Amount of money to borrow. Non-integer amounts are accepted but integers are preferable
				#country_temp - Which country to specifically borrow from, set to 0 to borrow money from any country

			add_debt = yes
			if = {
				limit = {
					check_variable = { borrow_temp > 0 }
				}
				add_to_variable = { treasury = borrow_temp }
				add_to_temp_variable = { 
					var = nonsense_var
					value = borrow_temp
					tooltip = treasury_change_positive_tooltip
				}
			}

		}
		#	Repays oustanding debt. Automatically caps at treasury amount.
		repay_debt = {
			#Scope: Country
			#INPUT:
				#x_temp - Amount of debt to repay. Non-integer amounts are accepted but integers are preferable
				#country_temp - Which country to specifically repay to, set to 0 to repay debts owed to any country
				#			  - If the repay amount is higher than the owed amount, only the owed amount is payed. The excess is not payed out further

			multiply_temp_variable = { x_temp = 1000 }
			if = {
				limit = {
					check_variable = { x_temp > treasury }
				}
				set_temp_variable = { x_temp = treasury }
				subtract_from_temp_variable = { x_temp = 0.5 }
				round_temp_variable = x_temp
			}
			divide_temp_variable = { x_temp = 1000 }
			if = {
				limit = {
					check_variable = { treasury > 0.999 }
				}
				remove_debt = yes
				if = {
					limit = {
						check_variable = { repay_temp > 0 }
					}
					subtract_from_variable = { treasury = repay_temp }
					subtract_from_temp_variable = { 
						var = nonsense_var
						value = repay_temp
						tooltip = treasury_change_negative_tooltip
					}
				}
			}
		}

		#	Adds portion_temp of the debt of country_temp to THIS. Set replace_debt_temp to instead replace the debt of the current country. 
		#	Set remove_debt_temp to remove the debt of the other country.
		inherit_debt = {
			set_temp_variable = { inheritee_temp = country_temp }

			clamp_temp_variable = { var = portion_temp max = 1 min = 0 }

			if = {
				limit = {
					country_exists = var:inheritee_temp
					check_variable = { portion_temp > 0 }
				}
				set_temp_variable = { total_debt_temp = inheritee_temp:national_debt_k }
				multiply_temp_variable = { total_debt_temp = portion_temp }
				custom_effect_tooltip = inherit_debt_tooltip

				# Clears your debt if replace is set to YES
				if = { limit = { NOT = { check_variable = { replace_debt_temp = 0 } } }
					clear_debt = yes
					custom_effect_tooltip = replace_debt_tooltip
				}
				# Copies debt from other country
				for_each_loop = {
					array = inheritee_temp:debt_to_bank_country
					value = debtor_temp
					if = {
						limit = {
							check_variable = { debtor_temp = inheritee_temp }
						}
						set_temp_variable = { country_temp = THIS }
					}
					else = {
						set_temp_variable = { country_temp = debtor_temp }
					}
					set_temp_variable = { x_temp = inheritee_temp:debt_to_bank_k@var:debtor_temp }
					multiply_temp_variable = { x_temp = portion_temp }
					set_temp_variable = { ignore_limits_temp = 1 }
					add_debt = yes

					if = { limit = { NOT = { check_variable = { remove_debt_temp = 0 } } }
						var:inheritee_temp = {
							set_temp_variable = { x_temp = debt_to_bank_k@var:debtor_temp }
							multiply_temp_variable = { x_temp = portion_temp }
							set_temp_variable = { country_temp = debtor_temp }
							remove_debt = yes
						}
					}
				}
			}
			
			set_temp_variable = { country_temp = 0 }
			set_temp_variable = { portion_temp = 0 }
			set_temp_variable = { replace_debt_temp = 0 }
			set_temp_variable = { remove_debt_temp = 0 }
		}

		#	Removes all your debt
		clear_debt = {
			while_loop_effect = {
				limit = {
					check_variable = { debt_to_bank_country^num > 0 }
				}
				set_temp_variable = { country_temp = debt_to_bank_country^0 }
				set_temp_variable = { x_temp = 0 }
				set_debt = yes
			}
		}


		# set_default

	## Trade ## cc_20

		# join_market
		# leave_market

	## Economy ## cc_30
		improve_economic_situation = {
			if = {
				limit = {
					has_idea = free_fall
				}
				swap_ideas = {
					remove_idea = free_fall
					add_idea = depression
				}
			}
			else_if = {
				limit = {
					has_idea = depression
				}
				swap_ideas = {
					remove_idea = depression
					add_idea = recession
				}
			}
			else_if = {
				limit = {
					has_idea = recession
				}
				swap_ideas = {
					remove_idea = recession
					add_idea = stagnation
				}
			}
			else_if = {
				limit = {
					has_idea = stagnation
				}
				swap_ideas = {
					remove_idea = stagnation
					add_idea = steady_growth
				}
			}
			else_if = {
				limit = {
					has_idea = steady_growth
				}
				swap_ideas = {
					remove_idea = steady_growth
					add_idea = fast_growth
				}
			}
			else_if = {
				limit = {
					has_idea = fast_growth
				}
				swap_ideas = {
					remove_idea = fast_growth
					add_idea = economic_boom
				}
			}
		}
		worsen_economic_situation = {
			if = {
				limit = {
					has_idea = economic_boom
				}
				swap_ideas = {
					remove_idea = economic_boom
					add_idea = fast_growth
				}
			}
			else_if = {
				limit = {
					has_idea = fast_growth
				}
				swap_ideas = {
					remove_idea = fast_growth
					add_idea = steady_growth
				}
			}
			else_if = {
				limit = {
					has_idea = steady_growth
				}
				swap_ideas = {
					remove_idea = steady_growth
					add_idea = stagnation
				}
			}
			else_if = {
				limit = {
					has_idea = stagnation
				}
				swap_ideas = {
					remove_idea = stagnation
					add_idea = recession
				}
			}
			else_if = {
				limit = {
					has_idea = recession
				}
				swap_ideas = {
					remove_idea = recession
					add_idea = depression
				}
			}
			else_if = {
				limit = {
					has_idea = depression
				}
				swap_ideas = {
					remove_idea = depression
					add_idea = free_fall
				}
			}
		}
		set_economic_situation = {
			if = {
				limit = {
					has_idea = economic_boom
				}
				swap_ideas = {
					remove_idea = economic_boom
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = fast_growth
				}
				swap_ideas = {
					remove_idea = fast_growth
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = steady_growth
				}
				swap_ideas = {
					remove_idea = steady_growth
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = stagnation
				}
				swap_ideas = {
					remove_idea = stagnation
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = recession
				}
				swap_ideas = {
					remove_idea = recession
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = depression
				}
				swap_ideas = {
					remove_idea = depression
					add_idea = var:situation_temp
				}
			}
			else_if = {
				limit = {
					has_idea = free_fall
				}
				swap_ideas = {
					remove_idea = free_fall
					add_idea = var:situation_temp
				}
			}
		}
		
		add_investment_fund = {
			add_to_variable = { var = investment_fund value = x_temp tooltip = investment_fund_change_positive_tooltip }
		}

		# proj_create
		# proj_cancel
		# proj_clear
		# proj_complete
	## Population ## cc_40
###