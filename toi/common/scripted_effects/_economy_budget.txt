
# Budget Update
    budget_update = {
        hidden_effect = {
            budget_clamp = yes

            taxes_update = yes
            spending_update = yes

            net_budget_update = yes
        }
    }
    budget_clamp = {
        # Set min & max
            set_variable = { income_tax_upper_strata_max = 100 }
            add_to_variable = { income_tax_upper_strata_max = modifier@upper_strata_income_tax_max_modifier }
            add_to_variable = { income_tax_upper_strata_max = modifier@income_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@upper_strata_income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { income_tax_upper_strata_max = modifier_temp }
            clamp_variable ={ var = income_tax_upper_strata_max max = 100 min = 0 }
            round_variable = income_tax_upper_strata_max
            
            set_variable = { income_tax_upper_strata_min = 0 }
            add_to_variable = { income_tax_upper_strata_min = modifier@upper_strata_income_tax_min_modifier }
            add_to_variable = { income_tax_upper_strata_min = modifier@income_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = income_tax_upper_strata_min }
            set_temp_variable = { modifier_temp = modifier@upper_strata_income_tax_min_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_min_factor }
            multiply_temp_variable = { add_temp = modifier_temp }
            add_to_variable = { income_tax_upper_strata_min = add_temp }
            clamp_variable ={ var = income_tax_upper_strata_min max = income_tax_upper_strata_max min = 0 }
            round_variable = income_tax_upper_strata_min
            
            set_variable = { income_tax_middle_strata_max = 100 }
            add_to_variable = { income_tax_middle_strata_max = modifier@middle_strata_income_tax_max_modifier }
            add_to_variable = { income_tax_middle_strata_max = modifier@income_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@middle_strata_income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { income_tax_middle_strata_max = modifier_temp }
            clamp_variable ={ var = income_tax_middle_strata_max max = 100 min = 0 }
            round_variable = income_tax_middle_strata_max
            
            set_variable = { income_tax_middle_strata_min = 0 }
            add_to_variable = { income_tax_middle_strata_min = modifier@middle_strata_income_tax_min_modifier }
            add_to_variable = { income_tax_middle_strata_min = modifier@income_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = income_tax_middle_strata_min }
            set_temp_variable = { modifier_temp = modifier@middle_strata_income_tax_min_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_min_factor }
            multiply_temp_variable = { add_temp = modifier_temp }
            add_to_variable = { income_tax_middle_strata_min = add_temp }
            clamp_variable ={ var = income_tax_middle_strata_min max = income_tax_middle_strata_max min = 0 }
            round_variable = income_tax_middle_strata_min
            
            set_variable = { income_tax_lower_strata_max = 100 }
            add_to_variable = { income_tax_lower_strata_max = modifier@lower_strata_income_tax_max_modifier }
            add_to_variable = { income_tax_lower_strata_max = modifier@income_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@lower_strata_income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { income_tax_lower_strata_max = modifier_temp }
            clamp_variable ={ var = income_tax_lower_strata_max max = 100 min = 0 }
            round_variable = income_tax_lower_strata_max
            
            set_variable = { income_tax_lower_strata_min = 0 }
            add_to_variable = { income_tax_lower_strata_min = modifier@lower_strata_income_tax_min_modifier }
            add_to_variable = { income_tax_lower_strata_min = modifier@income_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = income_tax_lower_strata_min }
            set_temp_variable = { modifier_temp = modifier@lower_strata_income_tax_min_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_min_factor }
            multiply_temp_variable = { add_temp = modifier_temp }
            add_to_variable = { income_tax_lower_strata_min = add_temp }
            clamp_variable ={ var = income_tax_lower_strata_min max = income_tax_lower_strata_max min = 0 }
            round_variable = income_tax_lower_strata_min

            
            set_variable = { sales_tax_max = 100 }
            add_to_variable = { sales_tax_max = modifier@sales_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@sales_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { sales_tax_max = modifier_temp }
            clamp_variable ={ var = sales_tax_max max = 100 min = 0 }
            round_variable = sales_tax_max
            
            set_variable = { sales_tax_min = 0 }
            add_to_variable = { sales_tax_min = modifier@sales_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = sales_tax_min }
            multiply_temp_variable = { add_temp = modifier@sales_tax_min_factor }
            add_to_variable = { sales_tax_min = add_temp }
            clamp_variable ={ var = sales_tax_min max = sales_tax_max min = 0 }
            round_variable = sales_tax_min
            
            set_variable = { corporate_tax_max = 100 }
            add_to_variable = { corporate_tax_max = modifier@corporate_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@corporate_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { corporate_tax_max = modifier_temp }
            clamp_variable ={ var = corporate_tax_max max = 100 min = 0 }
            round_variable = corporate_tax_max
            
            set_variable = { corporate_tax_min = 0 }
            add_to_variable = { corporate_tax_min = modifier@corporate_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = corporate_tax_min }
            multiply_temp_variable = { add_temp = modifier@corporate_tax_min_factor }
            add_to_variable = { corporate_tax_min = add_temp }
            clamp_variable ={ var = corporate_tax_min max = corporate_tax_max min = 0 }
            round_variable = corporate_tax_min
            
            
            set_variable = { import_tariff_max = 100 }
            add_to_variable = { import_tariff_max = modifier@import_tariff_max_modifier }
            set_temp_variable = { modifier_temp = modifier@import_tariff_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { import_tariff_max = modifier_temp }
            clamp_variable ={ var = import_tariff_max max = import_tariff_max min = -100 }
            round_variable = import_tariff_max
            
            set_variable = { import_tariff_min = -100 }
            add_to_variable = { import_tariff_min = modifier@import_tariff_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = import_tariff_min }
            multiply_temp_variable = { add_temp = modifier@import_tariff_min_factor }
            divide_temp_variable = { add_temp = 2 }
            add_to_variable = { import_tariff_min = add_temp }
            clamp_variable ={ var = import_tariff_min max = 100 min = -100 }
            clamp_variable ={ var = import_tariff_min max = import_tariff_max min = -100 }
            round_variable = import_tariff_min
            
            set_variable = { export_tariff_max = 100 }
            add_to_variable = { export_tariff_max = modifier@export_tariff_max_modifier }
            set_temp_variable = { modifier_temp = modifier@export_tariff_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { export_tariff_max = modifier_temp }
            clamp_variable ={ var = export_tariff_max max = 100 min = -100 }
            round_variable = export_tariff_max
            
            set_variable = { export_tariff_min = -100 }
            add_to_variable = { export_tariff_min = modifier@export_tariff_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = export_tariff_min }
            multiply_temp_variable = { add_temp = modifier@export_tariff_min_factor }
            divide_temp_variable = { add_temp = 2 }
            add_to_variable = { export_tariff_min = add_temp }
            clamp_variable ={ var = export_tariff_min max = export_tariff_max min = -100 }
            round_variable = export_tariff_min
            
            
            set_variable = { military_spending_max = 100 }
            add_to_variable = { military_spending_max = modifier@military_spending_max_modifier }
            set_temp_variable = { modifier_temp = modifier@military_spending_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { military_spending_max = modifier_temp }
            clamp_variable ={ var = military_spending_max max = 100 min = 0 }
            round_variable = military_spending_max
            
            set_variable = { military_spending_min = 0 }
            add_to_variable = { military_spending_min = modifier@military_spending_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = military_spending_min }
            multiply_temp_variable = { add_temp = modifier@military_spending_min_factor }
            add_to_variable = { military_spending_min = add_temp }
            clamp_variable ={ var = military_spending_min max = military_spending_max min = 0 }
            round_variable = military_spending_min
            
            set_variable = { research_spending_max = 100 }
            add_to_variable = { research_spending_max = modifier@research_spending_max_modifier }
            set_temp_variable = { modifier_temp = modifier@research_spending_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { research_spending_max = modifier_temp }
            clamp_variable ={ var = research_spending_max max = 100 min = 0 }
            round_variable = research_spending_max
            
            set_variable = { research_spending_min = 0 }
            add_to_variable = { research_spending_min = modifier@research_spending_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = research_spending_min }
            multiply_temp_variable = { add_temp = modifier@research_spending_min_factor }
            add_to_variable = { research_spending_min = add_temp }
            clamp_variable ={ var = research_spending_min max = research_spending_max min = 0 }
            round_variable = research_spending_min
            
            set_variable = { construction_spending_max = 100 }
            add_to_variable = { construction_spending_max = modifier@construction_spending_max_modifier }
            set_temp_variable = { modifier_temp = modifier@construction_spending_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { construction_spending_max = modifier_temp }
            clamp_variable ={ var = construction_spending_max max = 100 min = 0 }
            round_variable = construction_spending_max
            
            set_variable = { construction_spending_min = 0 }
            add_to_variable = { construction_spending_min = modifier@construction_spending_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = construction_spending_min }
            multiply_temp_variable = { add_temp = modifier@construction_spending_min_factor }
            add_to_variable = { construction_spending_min = add_temp }
            clamp_variable ={ var = construction_spending_min max = construction_spending_max min = 0 }
            round_variable = construction_spending_min
            
            set_variable = { subsidies_spending_max = 100 }
            add_to_variable = { subsidies_spending_max = modifier@subsidies_spending_max_modifier }
            set_temp_variable = { modifier_temp = modifier@subsidies_spending_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { subsidies_spending_max = modifier_temp }
            clamp_variable ={ var = subsidies_spending_max max = 100 min = 0 }
            round_variable = subsidies_spending_max
            
            set_variable = { subsidies_spending_min = 0 }
            add_to_variable = { subsidies_spending_min = modifier@subsidies_spending_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = subsidies_spending_min }
            multiply_temp_variable = { add_temp = modifier@subsidies_spending_min_factor }
            add_to_variable = { subsidies_spending_min = add_temp }
            clamp_variable ={ var = subsidies_spending_min max = subsidies_spending_max min = 0 }
            round_variable = subsidies_spending_min
        #

        set_variable = { construction_spending_percentage = 100 }

        # Clamping
            clamp_variable = { var = income_tax_upper_strata_percentage max = income_tax_upper_strata_max min = income_tax_upper_strata_min }
            clamp_variable = { var = income_tax_middle_strata_percentage max = income_tax_middle_strata_max min = income_tax_middle_strata_min }
            clamp_variable = { var = income_tax_lower_strata_percentage max = income_tax_lower_strata_max min = income_tax_lower_strata_min }
            
            clamp_variable = { var = sales_tax_percentage max = sales_tax_max min = sales_tax_min }
            clamp_variable = { var = corporate_tax_percentage max = corporate_tax_max min = corporate_tax_min }
            
            clamp_variable = { var = import_tariff_percentage max = import_tariff_max min = import_tariff_min }
            clamp_variable = { var = export_tariff_percentage max = export_tariff_max min = export_tariff_min }
            
            clamp_variable = { var = military_spending_percentage max = military_spending_max min = military_spending_min }
            clamp_variable = { var = research_spending_percentage max = research_spending_max min = research_spending_min }
            clamp_variable = { var = construction_spending_percentage max = construction_spending_max min = construction_spending_min }
            clamp_variable = { var = subsidies_spending_percentage max = subsidies_spending_max min = subsidies_spending_min }
        #

        # Max position adds +11 to position, Min is -2. This is to make the stoppers (min/max) look nice. I made it a var to make it easy to adjust
        set_temp_variable = { max_pos_add = 11 }
        set_temp_variable = { min_pos_sub = 2 }

        # Tariff Slider Positions
            set_variable = { import_tariff_slider_pos = import_tariff_percentage }
            divide_variable = { import_tariff_slider_pos = 2 }
            subtract_from_variable = { import_tariff_slider_pos = 0.499 }
            round_variable = import_tariff_slider_pos
            add_to_variable = { import_tariff_slider_pos = 50 }
            
            set_variable = { import_tariff_max_pos = import_tariff_max }
            divide_variable = { import_tariff_max_pos = 2 }
            subtract_from_variable = { import_tariff_max_pos = 0.499 }
            round_variable = import_tariff_max_pos
            add_to_variable = { import_tariff_max_pos = max_pos_add }
            add_to_variable = { import_tariff_max_pos = 50 }
            
            set_variable = { import_tariff_min_pos = import_tariff_min }
            divide_variable = { import_tariff_min_pos = 2 }
            subtract_from_variable = { import_tariff_min_pos = 0.499 }
            round_variable = import_tariff_min_pos
            subtract_from_variable = { import_tariff_min_pos = min_pos_sub }
            add_to_variable = { import_tariff_min_pos = 50 }
            

            set_variable = { export_tariff_slider_pos = export_tariff_percentage }
            divide_variable = { export_tariff_slider_pos = 2 }
            subtract_from_variable = { export_tariff_slider_pos = 0.499 }
            round_variable = export_tariff_slider_pos
            add_to_variable = { export_tariff_slider_pos = 50 }
            
            set_variable = { export_tariff_max_pos = export_tariff_max }
            divide_variable = { export_tariff_max_pos = 2 }
            subtract_from_variable = { export_tariff_max_pos = 0.499 }
            round_variable = export_tariff_max_pos
            add_to_variable = { export_tariff_max_pos = max_pos_add }
            add_to_variable = { export_tariff_max_pos = 50 }
            
            set_variable = { export_tariff_min_pos = export_tariff_min }
            divide_variable = { export_tariff_min_pos = 2 }
            subtract_from_variable = { export_tariff_min_pos = 0.499 }
            round_variable = export_tariff_min_pos
            subtract_from_variable = { export_tariff_min_pos = min_pos_sub }
            add_to_variable = { export_tariff_min_pos = 50 }
        #

        # Min/Max Pos of everything else
            set_variable = { income_tax_upper_strata_max_pos = income_tax_upper_strata_max }
            add_to_variable = { income_tax_upper_strata_max_pos = max_pos_add }
            set_variable = { income_tax_upper_strata_min_pos = income_tax_upper_strata_min }
            subtract_from_variable = { income_tax_upper_strata_min_pos = min_pos_sub }
            
            set_variable = { income_tax_middle_strata_max_pos = income_tax_middle_strata_max }
            add_to_variable = { income_tax_middle_strata_max_pos = max_pos_add }
            set_variable = { income_tax_middle_strata_min_pos = income_tax_middle_strata_min }
            subtract_from_variable = { income_tax_middle_strata_min_pos = min_pos_sub }
            
            set_variable = { income_tax_lower_strata_max_pos = income_tax_lower_strata_max }
            add_to_variable = { income_tax_lower_strata_max_pos = max_pos_add }
            set_variable = { income_tax_lower_strata_min_pos = income_tax_lower_strata_min }
            subtract_from_variable = { income_tax_lower_strata_min_pos = min_pos_sub }
            
            set_variable = { sales_tax_max_pos = sales_tax_max }
            add_to_variable = { sales_tax_max_pos = max_pos_add }
            set_variable = { sales_tax_min_pos = sales_tax_min }
            subtract_from_variable = { sales_tax_min_pos = min_pos_sub }
            
            set_variable = { corporate_tax_max_pos = corporate_tax_max }
            add_to_variable = { corporate_tax_max_pos = max_pos_add }
            set_variable = { corporate_tax_min_pos = corporate_tax_min }
            subtract_from_variable = { corporate_tax_min_pos = min_pos_sub }
            
            
            set_variable = { military_spending_max_pos = military_spending_max }
            add_to_variable = { military_spending_max_pos = max_pos_add }
            set_variable = { military_spending_min_pos = military_spending_min }
            subtract_from_variable = { military_spending_min_pos = min_pos_sub }
            
            set_variable = { research_spending_max_pos = research_spending_max }
            add_to_variable = { research_spending_max_pos = max_pos_add }
            set_variable = { research_spending_min_pos = research_spending_min }
            subtract_from_variable = { research_spending_min_pos = min_pos_sub }
            
            set_variable = { construction_spending_max_pos = construction_spending_max }
            add_to_variable = { construction_spending_max_pos = max_pos_add }
            set_variable = { construction_spending_min_pos = construction_spending_min }
            subtract_from_variable = { construction_spending_min_pos = min_pos_sub }
            
            set_variable = { subsidies_spending_max_pos = subsidies_spending_max }
            add_to_variable = { subsidies_spending_max_pos = max_pos_add }
            set_variable = { subsidies_spending_min_pos = subsidies_spending_min }
            subtract_from_variable = { subsidies_spending_min_pos = min_pos_sub }
        #
    }
    taxes_update = {
        #Country Scope

        set_temp_variable = { corruption_temp = modifier@corruption_factor }
        if = {
            limit = {
                check_variable = { corruption_temp > 1 }
            }
            set_temp_variable = { corruption_temp = 1 }
        }
        else_if = {
            limit = {
                check_variable = { corruption_temp < 0 }
            }
            set_temp_variable = { corruption_temp = 0 }
        }

        # Actual Taxation Percentages
            set_variable = { income_tax_upper_strata_percentage_actual = income_tax_upper_strata_percentage }
            multiply_variable = { income_tax_upper_strata_percentage_actual = modifier@tax_efficiency_factor }
        
            set_variable = { income_tax_middle_strata_percentage_actual = income_tax_middle_strata_percentage }
            multiply_variable = { income_tax_middle_strata_percentage_actual = modifier@tax_efficiency_factor }
            
            set_variable = { income_tax_lower_strata_percentage_actual = income_tax_lower_strata_percentage }
            multiply_variable = { income_tax_lower_strata_percentage_actual = modifier@tax_efficiency_factor }
            
            set_variable = { sales_tax_percentage_actual = sales_tax_percentage }
            multiply_variable = { sales_tax_percentage_actual = modifier@tax_efficiency_factor }
        
            set_variable = { corporate_tax_percentage_actual = corporate_tax_percentage }
            multiply_variable = { corporate_tax_percentage_actual = modifier@tax_efficiency_factor }
        
            set_variable = { import_tariff_percentage_actual = import_tariff_percentage }
            multiply_variable = { import_tariff_percentage_actual = modifier@bureaucratic_efficiency_factor }
            
            set_variable = { export_tariff_percentage_actual = export_tariff_percentage }
            multiply_variable = { export_tariff_percentage_actual = modifier@bureaucratic_efficiency_factor }
        #

        #Income Taxes
        set_temp_variable = { upper_earnings_limit = pops_earnings_avg }
        multiply_temp_variable = { upper_earnings_limit = 3 }
        set_temp_variable = { lower_earnings_limit = pops_earnings_avg }

        set_temp_variable = { upper_income_earnings = 0 }
        set_temp_variable = { middle_income_earnings = 0 }
        set_temp_variable = { lower_income_earnings = 0 }

        set_variable = { consumer_goods_earnings = 0 }
        every_controlled_state = {
            #Adding to Earnings
                set_temp_variable = { avg_earnings_temp = slaves_earnings }
                divide_temp_variable = { avg_earnings_temp = slaves }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = slaves_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = slaves_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = slaves_earnings }
                }

                set_temp_variable = { avg_earnings_temp = peasants_earnings }
                divide_temp_variable = { avg_earnings_temp = peasants }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = peasants_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = peasants_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = peasants_earnings }
                }

                set_temp_variable = { avg_earnings_temp = laborers_earnings }
                divide_temp_variable = { avg_earnings_temp = laborers }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = laborers_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = laborers_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = laborers_earnings }
                }

                set_temp_variable = { avg_earnings_temp = workers_earnings }
                divide_temp_variable = { avg_earnings_temp = workers }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = workers_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = workers_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = workers_earnings }
                }

                set_temp_variable = { avg_earnings_temp = professionals_earnings }
                divide_temp_variable = { avg_earnings_temp = professionals }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = professionals_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = professionals_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = professionals_earnings }
                }

                set_temp_variable = { avg_earnings_temp = specialists_earnings }
                divide_temp_variable = { avg_earnings_temp = specialists }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = specialists_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = specialists_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = specialists_earnings }
                }

                set_temp_variable = { avg_earnings_temp = capitalists_earnings }
                divide_temp_variable = { avg_earnings_temp = capitalists }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = capitalists_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = capitalists_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = capitalists_earnings }
                }

                set_temp_variable = { avg_earnings_temp = aristocrats_earnings }
                divide_temp_variable = { avg_earnings_temp = aristocrats }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = aristocrats_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = aristocrats_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = aristocrats_earnings }
                }

                set_temp_variable = { avg_earnings_temp = bureaucrats_earnings }
                divide_temp_variable = { avg_earnings_temp = bureaucrats }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = bureaucrats_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = bureaucrats_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = bureaucrats_earnings }
                }

                set_temp_variable = { avg_earnings_temp = soldiers_earnings }
                divide_temp_variable = { avg_earnings_temp = soldiers }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = soldiers_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = soldiers_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = soldiers_earnings }
                }
            #

            add_to_variable = { PREV.consumer_goods_earnings = revenue@token:industrial_complex }
            add_to_variable = { PREV.consumer_goods_earnings = revenue@token:arms_factory }
            add_to_variable = { PREV.consumer_goods_earnings = revenue@token:dockyard }
        }
        set_variable = { public_enterprise_revenue = consumer_goods_earnings }

        set_variable = { income_tax_upper_strata_revenue = upper_income_earnings }
        set_variable = { income_tax_middle_strata_revenue = middle_income_earnings }
        set_variable = { income_tax_lower_strata_revenue = lower_income_earnings }

        if = {
            limit = {
                check_variable = { income_tax_upper_strata_revenue > 1000 }
            }
            divide_variable = { income_tax_upper_strata_revenue = 100 }
            multiply_variable = { income_tax_upper_strata_revenue = income_tax_upper_strata_percentage_actual }
        }
        else = {
            multiply_variable = { income_tax_upper_strata_revenue = income_tax_upper_strata_percentage_actual }
            divide_variable = { income_tax_upper_strata_revenue = 100 }
        }
        if = {
            limit = {
                check_variable = { income_tax_middle_strata_revenue > 1000 }
            }
            divide_variable = { income_tax_middle_strata_revenue = 100 }
            multiply_variable = { income_tax_middle_strata_revenue = income_tax_middle_strata_percentage_actual }
        }
        else = {
            multiply_variable = { income_tax_middle_strata_revenue = income_tax_middle_strata_percentage_actual }
            divide_variable = { income_tax_middle_strata_revenue = 100 }
        }
        if = {
            limit = {
                check_variable = { income_tax_lower_strata_revenue > 1000 }
            }
            divide_variable = { income_tax_lower_strata_revenue = 100 }
            multiply_variable = { income_tax_lower_strata_revenue = income_tax_lower_strata_percentage_actual }
        }
        else = {
            multiply_variable = { income_tax_lower_strata_revenue = income_tax_lower_strata_percentage_actual }
            divide_variable = { income_tax_lower_strata_revenue = 100 }
        }

        set_variable = { income_tax_upper_strata_corruption = income_tax_upper_strata_revenue }
        multiply_variable = { income_tax_upper_strata_corruption = corruption_temp }
        subtract_from_variable = { income_tax_upper_strata_revenue = income_tax_upper_strata_corruption }
        set_variable = { income_tax_middle_strata_corruption = income_tax_middle_strata_revenue }
        multiply_variable = { income_tax_middle_strata_corruption = corruption_temp }
        subtract_from_variable = { income_tax_middle_strata_revenue = income_tax_middle_strata_corruption }
        set_variable = { income_tax_lower_strata_corruption = income_tax_lower_strata_revenue }
        multiply_variable = { income_tax_lower_strata_corruption = corruption_temp }
        subtract_from_variable = { income_tax_lower_strata_revenue = income_tax_lower_strata_corruption }

        set_variable = { income_tax_revenue = income_tax_upper_strata_revenue }
        add_to_variable = { income_tax_revenue = income_tax_middle_strata_revenue }
        add_to_variable = { income_tax_revenue = income_tax_lower_strata_revenue }

        set_variable = { income_tax_corruption = income_tax_upper_strata_corruption }
        add_to_variable = { income_tax_corruption = income_tax_middle_strata_corruption }
        add_to_variable = { income_tax_corruption = income_tax_lower_strata_corruption }

        #Sales Tax
            set_variable = { sales_tax_revenue = 0 }
            every_controlled_state = {
                add_to_variable = { PREV.sales_tax_revenue = pops_needs_spending }
            }
            if = {
                limit = {
                    check_variable = { sales_tax_revenue > 1000 }
                }
                divide_variable = { sales_tax_revenue = 100 }
                multiply_variable = { sales_tax_revenue = sales_tax_percentage_actual }
            }
            else = {
                multiply_variable = { sales_tax_revenue = sales_tax_percentage_actual }
                divide_variable = { sales_tax_revenue = 100 }
            }
                
            set_variable = { sales_tax_corruption = sales_tax_revenue }
            multiply_variable = { sales_tax_corruption = corruption_temp }
            subtract_from_variable = { sales_tax_revenue = sales_tax_corruption }
        #

        #Corporate
            set_variable = { corporate_tax_revenue = capitalists_dividends }
            add_to_variable = { corporate_tax_revenue = aristocrats_dividends }
            if = {
                limit = {
                    check_variable = { corporate_tax_revenue < 0 }
                }
                set_variable = { corporate_tax_revenue = 0 }
            }
            if = {
                limit = {
                    check_variable = { corporate_tax_revenue > 1000 }
                }
                divide_variable = { corporate_tax_revenue = 100 }
                multiply_variable = { corporate_tax_revenue = corporate_tax_percentage_actual }
            }
            else = {
                multiply_variable = { corporate_tax_revenue = corporate_tax_percentage_actual }
                divide_variable = { corporate_tax_revenue = 100 }
            }
            
            set_variable = { corporate_tax_corruption = corporate_tax_revenue }
            multiply_variable = { corporate_tax_corruption = corruption_temp }
            subtract_from_variable = { corporate_tax_revenue = corporate_tax_corruption }
        #

        #Tariffs
            set_variable = { export_tariffs = 0 }
            set_variable = { import_tariffs = 0 }

            for_each_loop = {
                array = trade_routes
                value = r_token

                if = { #Import
                    limit = {
                        check_variable = { trade@var:r_token > 0 }
                    }
                    add_to_variable = { import_tariffs = trade_tariffs@var:r_token }
                }
                else_if = { #Export
                    limit = {
                        check_variable = { trade@var:r_token < 0 }
                    }
                    subtract_from_variable = { export_tariffs = trade_tariffs@var:r_token }
                }
            }

            if = {
                limit = {
                    check_variable = { export_tariffs < 0 }
                }
                divide_variable = { export_tariffs = modifier@bureaucratic_efficiency_factor }
            }
            if = {
                limit = {
                    check_variable = { import_tariffs < 0 }
                }
                divide_variable = { import_tariffs = modifier@bureaucratic_efficiency_factor }
            }

            set_variable = { net_tariffs = import_tariffs }
            add_to_variable = { net_tariffs = export_tariffs }

            set_variable = { tariff_revenue = 0 }
            if = {
                limit = {
                    check_variable = { import_tariffs > 0 }
                }
                add_to_variable = { tariff_revenue = import_tariffs }

                set_variable = { import_tariffs_corruption = import_tariffs }
                multiply_variable = { import_tariffs_corruption = corruption_temp }
                subtract_from_variable = { import_tariffs = import_tariffs_corruption }
            }
            else = {
                set_variable = { import_tariffs_corruption = 0 }
            }
            if = {
                limit = {
                    check_variable = { export_tariffs > 0 }
                }
                add_to_variable = { tariff_revenue = export_tariffs }

                set_variable = { export_tariffs_corruption = export_tariffs }
                multiply_variable = { export_tariffs_corruption = corruption_temp }
                subtract_from_variable = { export_tariffs = export_tariffs_corruption }
            }
            else = {
                set_variable = { export_tariffs_corruption = 0 }
            }
            set_variable = { tariff_corruption = import_tariffs_corruption }
            add_to_variable = { tariff_corruption = export_tariffs_corruption }
            subtract_from_variable = { net_tariffs = tariff_corruption }
        #

        set_variable = { modifier_revenue = modifier@treasury_gain_monthly }
        set_temp_variable = { rev_temp = pops }
        multiply_temp_variable = { rev_temp = modifier@treasury_gain_monthly_per_c }
        add_to_variable = { modifier_revenue = rev_temp }
        set_temp_variable = { rev_temp = gdp_amount }
        multiply_temp_variable = { rev_temp = modifier@treasury_gain_monthly_per_gdp }
        add_to_variable = { modifier_revenue = rev_temp }

        set_variable = { other_revenue = public_enterprise_revenue }
        add_to_variable = { other_revenue = modifier_revenue }

        set_variable = { revenue = income_tax_revenue }
        add_to_variable = { revenue = sales_tax_revenue }
        add_to_variable = { revenue = corporate_tax_revenue }
        add_to_variable = { revenue = tariff_revenue }
        add_to_variable = { revenue = other_revenue }

        if = {
            limit = {
                is_ai = no
            }
            create_pie_chart_revenue = yes
        }
    }
    spending_update = {
        proj_update = yes

        # Spending Effects
            # TAXATION
            set_variable = { tax_political_power_gain_factor = 0 }
            set_variable = { tax_stability_factor_factor = 0 }
            set_variable = { tax_war_support_factor_factor = 0 }
            set_variable = { tax_investment_confidence_modifier_factor = 0 }

            # Pol Power
            set_temp_variable = { factor_temp = income_tax_upper_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.1 }
            add_to_variable = { tax_political_power_gain_factor = factor_temp }

            set_temp_variable = { factor_temp = income_tax_middle_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.05 }
            add_to_variable = { tax_political_power_gain_factor = factor_temp }

            set_temp_variable = { factor_temp = income_tax_lower_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.05 }
            add_to_variable = { tax_political_power_gain_factor = factor_temp }

            set_temp_variable = { factor_temp = sales_tax_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.2 }
            add_to_variable = { tax_political_power_gain_factor = factor_temp }

            set_temp_variable = { factor_temp = corporate_tax_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.1 }
            add_to_variable = { tax_political_power_gain_factor = factor_temp }

            # Stab
            set_temp_variable = { factor_temp = income_tax_upper_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.02 }
            add_to_variable = { tax_stability_factor_factor = factor_temp }

            set_temp_variable = { factor_temp = income_tax_middle_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.04 }
            add_to_variable = { tax_stability_factor_factor = factor_temp }

            set_temp_variable = { factor_temp = income_tax_lower_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.07 }
            add_to_variable = { tax_stability_factor_factor = factor_temp }

            set_temp_variable = { factor_temp = sales_tax_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.1 }
            add_to_variable = { tax_stability_factor_factor = factor_temp }

            set_temp_variable = { factor_temp = corporate_tax_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.02 }
            add_to_variable = { tax_stability_factor_factor = factor_temp }

            # War Sup
            set_temp_variable = { factor_temp = income_tax_upper_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.05 }
            add_to_variable = { tax_war_support_factor_factor = factor_temp }

            set_temp_variable = { factor_temp = income_tax_middle_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.07 }
            add_to_variable = { tax_war_support_factor_factor = factor_temp }

            set_temp_variable = { factor_temp = income_tax_lower_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.08 }
            add_to_variable = { tax_war_support_factor_factor = factor_temp }

            set_temp_variable = { factor_temp = sales_tax_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.15 }
            add_to_variable = { tax_war_support_factor_factor = factor_temp }

            set_temp_variable = { factor_temp = corporate_tax_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -0.05 }
            add_to_variable = { tax_war_support_factor_factor = factor_temp }

            # Invest Conf
            set_temp_variable = { factor_temp = income_tax_upper_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -5.0 }
            add_to_variable = { tax_investment_confidence_modifier_factor = factor_temp }

            set_temp_variable = { factor_temp = income_tax_middle_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -3.0 }
            add_to_variable = { tax_investment_confidence_modifier_factor = factor_temp }

            set_temp_variable = { factor_temp = income_tax_lower_strata_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -2.0 }
            add_to_variable = { tax_investment_confidence_modifier_factor = factor_temp }

            set_temp_variable = { factor_temp = sales_tax_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -5.0 }
            add_to_variable = { tax_investment_confidence_modifier_factor = factor_temp }

            set_temp_variable = { factor_temp = corporate_tax_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = -10.0 }
            add_to_variable = { tax_investment_confidence_modifier_factor = factor_temp }

            # MILITARY
            set_temp_variable = { factor_temp = 100 }
            subtract_from_temp_variable = { factor_temp = military_spending_percentage }
            divide_temp_variable = { factor_temp = 100 }

            set_variable = { military_spending_supply_consumption_factor = global.min_military_spending_supply_consumption_factor }
            set_variable = { military_spending_naval_coordination = global.min_military_spending_naval_coordination }
            set_variable = { military_spending_training_time_army_factor = global.min_military_spending_training_time_army_factor }
            set_variable = { military_spending_army_org_factor = global.min_military_spending_army_org_factor }
            set_variable = { military_spending_army_bonus_air_superiority_factor = global.min_military_spending_army_bonus_air_superiority_factor }
            set_variable = { military_spending_air_accidents_factor = global.min_military_spending_air_accidents_factor }
            set_variable = { military_spending_attrition = global.min_military_spending_attrition }
            set_variable = { military_spending_max_command_power_mult = global.min_military_spending_max_command_power_mult }
            set_variable = { military_spending_army_morale_factor = global.min_military_spending_army_morale_factor }
            set_variable = { military_spending_naval_morale_factor = global.min_military_spending_naval_morale_factor }
            
            multiply_variable = { military_spending_supply_consumption_factor = factor_temp }
            multiply_variable = { military_spending_naval_coordination = factor_temp }
            multiply_variable = { military_spending_training_time_army_factor = factor_temp }
            multiply_variable = { military_spending_army_org_factor = factor_temp }
            multiply_variable = { military_spending_army_bonus_air_superiority_factor = factor_temp }
            multiply_variable = { military_spending_air_accidents_factor = factor_temp }
            multiply_variable = { military_spending_attrition = factor_temp }
            multiply_variable = { military_spending_max_command_power_mult = factor_temp }
            multiply_variable = { military_spending_army_morale_factor = factor_temp }
            multiply_variable = { military_spending_naval_morale_factor = factor_temp }
            
            set_variable = { military_spending_command_power_gain_mult = global.max_military_spending_command_power_gain_mult }
            multiply_variable = { military_spending_command_power_gain_mult = military_spending_percentage }
            divide_variable = { military_spending_command_power_gain_mult = 100 }

            # RESEARCH
            set_temp_variable = { factor_temp = 100 }
            subtract_from_temp_variable = { factor_temp = research_spending_percentage }
            divide_temp_variable = { factor_temp = 100 }
            
            set_variable = { research_spending_research_speed_factor = global.min_research_spending_research_speed_factor }
            set_variable = { research_spending_support_tech = global.min_research_spending_support_tech }
            set_variable = { research_spending_cat_artillery_techs = global.min_research_spending_cat_artillery_techs }
            set_variable = { research_spending_armor = global.min_research_spending_armor }
            set_variable = { research_spending_aviation_tech = global.min_research_spending_aviation_tech }
            set_variable = { research_spending_air_equipment = global.min_research_spending_air_equipment }
            set_variable = { research_spending_cat_projects_techs = global.min_research_spending_cat_projects_techs }
            set_variable = { research_spending_naval_equipment = global.min_research_spending_naval_equipment }

            multiply_variable = { research_spending_research_speed_factor = factor_temp }
            multiply_variable = { research_spending_support_tech = factor_temp }
            multiply_variable = { research_spending_cat_artillery_techs = factor_temp }
            multiply_variable = { research_spending_armor = factor_temp }
            multiply_variable = { research_spending_aviation_tech = factor_temp }
            multiply_variable = { research_spending_air_equipment = factor_temp }
            multiply_variable = { research_spending_cat_projects_techs = factor_temp }
            multiply_variable = { research_spending_naval_equipment = factor_temp }
            
            set_temp_variable = { factor_temp = research_spending_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = global.max_research_spending_research_speed_factor }
            add_to_variable = { research_spending_research_speed_factor = factor_temp }
        #

        set_variable = { construction_spending = 0 }
        set_variable = { projects_spending = 0 }
        set_variable = { industrial_subsidy = 0 }
        set_variable = { infrastructure_subsidy = 0 }

        set_variable = { administration_spending = 0 }
        set_variable = { military_payroll_spending = 0 }
        set_variable = { military_production_payroll_spending = 0 }
        set_variable = { public_enterprise_payroll_spending = 0 }
        every_controlled_state = {
            #Administration
            set_temp_variable = { admin_temp = pops_earnings }
            multiply_temp_variable = { admin_temp = global.administration_base_expense }
            divide_temp_variable = { admin_temp = 100 }
            if = {
                limit = {
                    check_variable = { pops < global.administration_population_expense }
                }
                set_temp_variable = { modifier_temp = global.administration_population_expense }
                subtract_from_temp_variable = { modifier_temp = pops }
                divide_temp_variable = { modifier_temp = global.administration_population_expense }
                multiply_temp_variable = { modifier_temp = global.administration_population_expense_modifier }
                add_to_temp_variable = { modifier_temp = 1 }
                multiply_temp_variable = { admin_temp = modifier_temp }
            }
            add_to_variable = { PREV.administration_spending = admin_temp }

            for_each_loop = {
                array = industries
                index = sp_i
                value = sp_token

                #Construction
                if = {
                    limit = {
                        check_variable = { construction@var:sp_token > 0 }
                        check_variable = { construction_financier@var:sp_token = PREV }
                    }
                    add_to_variable = { PREV.construction_spending = construction_cost@var:sp_token }
                }
                if = {
                    limit = {
                        NOT = { check_variable = { retooling_pm@var:sp_token = 0 } }
                        check_variable = { retooling_financier@var:sp_token = PREV }
                    }
                    add_to_variable = { PREV.construction_spending = retooling_cost@var:sp_token }
                }
            }
            add_to_variable = { PREV.military_production_payroll_spending = expenses@token:arms_factory }
            add_to_variable = { PREV.military_production_payroll_spending = expenses@token:dockyard }
            add_to_variable = { PREV.public_enterprise_payroll_spending = expenses@token:industrial_complex }
        }
        #divide_variable = { military_production_payroll_spending = modifier@bureaucratic_efficiency_factor }
        #divide_variable = { public_enterprise_payroll_spending = modifier@bureaucratic_efficiency_factor }

        set_temp_variable = { modifier_temp = modifier@administration_cost_per_c }
        multiply_temp_variable = { modifier_temp = pops }
        add_to_variable = { administration_spending = modifier_temp }
        # log = "Admin cost per c: [?modifier_temp]"
        set_temp_variable = { modifier_temp = modifier@administration_cost_per_gdp }
        multiply_temp_variable = { modifier_temp = gdp_amount }
        add_to_variable = { administration_spending = modifier_temp }
        # log = "Admin cost per GDP: [?modifier_temp]"

        set_temp_variable = { modifier_temp = modifier@administration_cost_factor }
        add_to_temp_variable = { modifier_temp = 1 }
        multiply_variable = { administration_spending = modifier_temp }
        

        divide_variable = { administration_spending = modifier@bureaucratic_efficiency_factor }
        divide_variable = { construction_spending = modifier@bureaucratic_efficiency_factor }

        #Military Payroll
        set_variable = { military_payroll_spending = deployed_army_manpower_k }
        add_to_variable = { military_payroll_spending = deployed_navy_manpower_k }
        add_to_variable = { military_payroll_spending = deployed_airforce_manpower_k }
        multiply_variable = { military_payroll_spending = pops_earnings_avg }
        divide_variable = { military_payroll_spending = 2 }
        divide_variable = { military_payroll_spending = global.pops_workforce_participation }
        divide_variable = { military_payroll_spending = modifier@bureaucratic_efficiency_factor }

        set_temp_variable = { modifier_temp = modifier@military_payroll_cost_factor }
        add_to_temp_variable = { modifier_temp = 1 }
        multiply_variable = { military_payroll_spending = modifier_temp }

        #Military Production
            set_variable = { military_production_resources_spending = 0 }
            set_temp_variable = { modifier_temp = modifier@military_production_cost_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            for_each_loop = {
                array = global.resource_token_array
                value = r_type

                set_temp_variable = { spending_temp = resource_consumed@var:r_type }
                multiply_temp_variable = { spending_temp = price@var:r_type }
                multiply_temp_variable = { spending_temp = modifier_temp }
                add_to_variable = { military_production_resources_spending = spending_temp }
            }
            divide_variable = { military_production_resources_spending = modifier@bureaucratic_efficiency_factor }
        #
        set_variable = { military_mandatory_spending = military_production_resources_spending }
        add_to_variable = { military_mandatory_spending = military_production_payroll_spending }
        add_to_variable = { military_mandatory_spending = military_payroll_spending }

        set_variable = { modifier_spending = modifier@treasury_cost_monthly }
        set_temp_variable = { exp_temp = pops }
        multiply_temp_variable = { exp_temp = modifier@treasury_cost_monthly_per_c }
        add_to_variable = { modifier_spending = exp_temp }
        set_temp_variable = { exp_temp = gdp_amount }
        multiply_temp_variable = { exp_temp = modifier@treasury_cost_monthly_per_gdp }
        add_to_variable = { modifier_spending = exp_temp }

        set_variable = { other_spending = public_enterprise_payroll_spending }
        add_to_variable = { other_spending = modifier_spending }

        #Military
            set_variable = { military_army_spending = 0 }
            set_variable = { military_navy_spending = 0 }
            for_each_loop = {
                array = global.unit_types
                value = unit_type_temp

                set_variable = { military_spending@var:unit_type_temp = military_cost@var:unit_type_temp }
                multiply_variable = { military_spending@var:unit_type_temp = military_spending_percentage }
                divide_variable = { military_spending@var:unit_type_temp = 100 }
                add_to_variable = { military_army_spending = military_spending@var:unit_type_temp }

                set_variable = { military_spending_per@var:unit_type_temp = military_cost_per@var:unit_type_temp }
                multiply_variable = { military_spending_per@var:unit_type_temp = military_spending_percentage }
                divide_variable = { military_spending_per@var:unit_type_temp = 100 }
            }
            for_each_loop = {
                array = global.ship_types
                value = unit_type_temp

                set_variable = { military_spending@var:unit_type_temp = military_cost@var:unit_type_temp }
                multiply_variable = { military_spending@var:unit_type_temp = military_spending_percentage }
                divide_variable = { military_spending@var:unit_type_temp = 100 }
                add_to_variable = { military_navy_spending = military_spending@var:unit_type_temp }
                
                set_variable = { military_spending_per@var:unit_type_temp = military_cost_per@var:unit_type_temp }
                multiply_variable = { military_spending_per@var:unit_type_temp = military_spending_percentage }
                divide_variable = { military_spending_per@var:unit_type_temp = 100 }
            }
            
            # divide_variable = { military_army_spending = modifier@bureaucratic_efficiency_factor } - Already done
            # divide_variable = { military_navy_spending = modifier@bureaucratic_efficiency_factor }
            # divide_variable = { military_airforce_spending = modifier@bureaucratic_efficiency_factor }

            set_variable = { military_spending = military_army_spending }
            add_to_variable = { military_spending = military_navy_spending }
            add_to_variable = { military_spending = military_airforce_spending }
        #

        #Projects

            for_each_loop = {
                array = proj_id
                value = project_token_temp
                index = pii

                set_temp_variable = { project_scope_temp = proj_scope^pii }

                add_to_variable = { projects_spending = project_scope_temp:proj_estimated_monthly_cost@var:project_token_temp }
            }
            divide_variable = { projects_spending = modifier@bureaucratic_efficiency_factor }

            add_to_variable = { construction_spending = projects_spending }
        #

        #Trade Subsidies
            set_variable = { export_tariffs = 0 }
            set_variable = { import_tariffs = 0 }

            for_each_loop = {
                array = trade_routes
                value = r_token

                if = { #Import
                    limit = {
                        check_variable = { trade@var:r_token > 0 }
                    }
                    add_to_variable = { import_tariffs = trade_tariffs@var:r_token }
                }
                else_if = { #Export
                    limit = {
                        check_variable = { trade@var:r_token < 0 }
                    }
                    subtract_from_variable = { export_tariffs = trade_tariffs@var:r_token }
                }
            }

            if = {
                limit = {
                    check_variable = { export_tariffs < 0 }
                }
                divide_variable = { export_tariffs = modifier@bureaucratic_efficiency_factor }
            }
            if = {
                limit = {
                    check_variable = { import_tariffs < 0 }
                }
                divide_variable = { import_tariffs = modifier@bureaucratic_efficiency_factor }
            }

            set_variable = { net_tariffs = import_tariffs }
            add_to_variable = { net_tariffs = export_tariffs }

            set_variable = { trade_subsidy = 0 }
            if = {
                limit = {
                    check_variable = { import_tariffs < 0 }
                }
                subtract_from_variable = { trade_subsidy = import_tariffs }
            }
            if = {
                limit = {
                    check_variable = { export_tariffs < 0 }
                }
                subtract_from_variable = { trade_subsidy = export_tariffs }
            }
            
            set_variable = { tariff_revenue = 0 }
            if = {
                limit = {
                    check_variable = { import_tariffs > 0 }
                }
                add_to_variable = { tariff_revenue = import_tariffs }

                set_variable = { import_tariffs_corruption = import_tariffs }
                multiply_variable = { import_tariffs_corruption = corruption_temp }
                subtract_from_variable = { import_tariffs = import_tariffs_corruption }
            }
            else = {
                set_variable = { import_tariffs_corruption = 0 }
            }
            if = {
                limit = {
                    check_variable = { export_tariffs > 0 }
                }
                add_to_variable = { tariff_revenue = export_tariffs }

                set_variable = { export_tariffs_corruption = export_tariffs }
                multiply_variable = { export_tariffs_corruption = corruption_temp }
                subtract_from_variable = { export_tariffs = export_tariffs_corruption }
            }
            else = {
                set_variable = { export_tariffs_corruption = 0 }
            }
            set_variable = { tariff_corruption = import_tariffs_corruption }
            add_to_variable = { tariff_corruption = export_tariffs_corruption }
            subtract_from_variable = { net_tariffs = tariff_corruption }
        #
        # Research Subsidies
            set_variable = { research_spending = global.research_base_expense }
            set_temp_variable = { expense_add_temp = pops_earnings_avg }
            multiply_temp_variable = { expense_add_temp = global.research_pops_earnings_avg_expense_add }
            add_to_variable = { research_spending = expense_add_temp }
            multiply_variable = { research_spending = pops }
            divide_variable = { research_spending = 100 }
            multiply_variable = { research_spending = research_spending_percentage }
            divide_variable = { research_spending = modifier@bureaucratic_efficiency_factor }

            set_temp_variable = { research_modifier_temp = modifier@research_cost_factor }
            add_to_temp_variable = { research_modifier_temp = 1 }
            multiply_variable = { research_spending = research_modifier_temp }
        #

        # Order Spending
            set_variable = { order_and_intel_spending = 0 }
            set_temp_variable = { modifier_temp = modifier@order_cost_per_c }
            multiply_temp_variable = { modifier_temp = pops }
            add_to_variable = { order_and_intel_spending = modifier_temp }
            set_temp_variable = { modifier_temp = modifier@order_cost_per_gdp }
            multiply_temp_variable = { modifier_temp = gdp_amount }
            add_to_variable = { order_and_intel_spending = modifier_temp }
            divide_variable = { order_and_intel_spending = modifier@bureaucratic_efficiency_factor }
        #

        # Social Spending
            set_variable = { education_spending = 0 }
            set_temp_variable = { modifier_temp = modifier@education_cost_per_c }
            multiply_temp_variable = { modifier_temp = pops }
            add_to_variable = { education_spending = modifier_temp }
            set_temp_variable = { modifier_temp = modifier@education_cost_per_gdp }
            multiply_temp_variable = { modifier_temp = gdp_amount }
            add_to_variable = { education_spending = modifier_temp }
            divide_variable = { education_spending = modifier@bureaucratic_efficiency_factor }
            
            set_variable = { healthcare_spending = 0 }
            set_temp_variable = { modifier_temp = modifier@healthcare_cost_per_c }
            multiply_temp_variable = { modifier_temp = pops }
            add_to_variable = { healthcare_spending = modifier_temp }
            set_temp_variable = { modifier_temp = modifier@healthcare_cost_per_gdp }
            multiply_temp_variable = { modifier_temp = gdp_amount }
            add_to_variable = { healthcare_spending = modifier_temp }
            divide_variable = { healthcare_spending = modifier@bureaucratic_efficiency_factor }

            set_variable = { social_spending = education_spending }
            add_to_variable = { social_spending = healthcare_spending }
        #

        set_variable = { subsidies_spending = 0 }

        set_variable = { discretionary_spending = subsidies_spending }
        add_to_variable = { discretionary_spending = construction_spending }
        add_to_variable = { discretionary_spending = research_spending }
        add_to_variable = { discretionary_spending = military_spending }

        set_temp_variable = { local_debt_payment_temp = debt_to_national_bank_k }
        multiply_temp_variable = { local_debt_payment_temp = domestic_interest_rate }
        divide_temp_variable = { local_debt_payment_temp = 1.2 }
        set_temp_variable = { foreign_debt_payment_temp = debt_to_foreign_countries_k }
        multiply_temp_variable = { foreign_debt_payment_temp = foreign_interest_rate }
        divide_temp_variable = { foreign_debt_payment_temp = 1.2 }
        set_variable = { national_debt_interest = local_debt_payment_temp }
        add_to_variable = { national_debt_interest = foreign_debt_payment_temp }

        set_variable = { mandatory_spending = national_debt_interest }
        add_to_variable = { mandatory_spending = administration_spending }
        add_to_variable = { mandatory_spending = military_mandatory_spending }
        add_to_variable = { mandatory_spending = order_and_intel_spending }
        add_to_variable = { mandatory_spending = social_spending }
        add_to_variable = { mandatory_spending = other_spending }
        
        set_variable = { spending = discretionary_spending }
        add_to_variable = { spending = mandatory_spending }
        add_to_variable = { spending = trade_subsidy }
        
        if = {
            limit = {
                is_ai = no
            }
            create_pie_chart_spending = yes
        }
    }
    net_budget_update = {
        #Literally three lines

        set_variable = { net_budget = revenue }
        subtract_from_variable = { net_budget = spending }
    }

    spending_effects_update = {
        # Only in the on-monthly code
        # Applies changes to discretionary spending modifiers

        # Income Taxes
        set_variable = { tax_political_power_gain_actual = tax_political_power_gain_factor }
        set_variable = { tax_stability_factor_actual = tax_stability_factor_factor }
        set_variable = { tax_war_support_factor_actual = tax_war_support_factor_factor }
        set_variable = { tax_investment_confidence_modifier_actual = tax_investment_confidence_modifier_factor }

        # Military Spending
        set_variable = { military_spending_supply_consumption_factor_actual = military_spending_supply_consumption_factor }
        set_variable = { military_spending_naval_coordination_actual = military_spending_naval_coordination }
        set_variable = { military_spending_training_time_army_factor_actual = military_spending_training_time_army_factor }
        set_variable = { military_spending_army_org_factor_actual = military_spending_army_org_factor }
        set_variable = { military_spending_army_bonus_air_superiority_factor_actual = military_spending_army_bonus_air_superiority_factor }
        set_variable = { military_spending_air_accidents_factor_actual = military_spending_air_accidents_factor }
        set_variable = { military_spending_attrition_actual = military_spending_attrition }
        set_variable = { military_spending_command_power_gain_mult_actual = military_spending_command_power_gain_mult }
        set_variable = { military_spending_army_morale_factor_actual = military_spending_army_morale_factor }
        set_variable = { military_spending_naval_morale_factor_actual = military_spending_naval_morale_factor }
        set_variable = { military_spending_max_command_power_mult_actual = military_spending_max_command_power_mult }

        # Research Spending
            set_variable = { research_spending_research_speed_factor_actual = research_spending_research_speed_factor }

            remove_ideas = {
                research_subsidies_0
                research_subsidies_1
                research_subsidies_2
                research_subsidies_3
                research_subsidies_4
                research_subsidies_5
                research_subsidies_6
                research_subsidies_7
                research_subsidies_8
                research_subsidies_9
                research_subsidies_10
                research_subsidies_11
                research_subsidies_12
                research_subsidies_13
                research_subsidies_14
                research_subsidies_15
                research_subsidies_16
                research_subsidies_17
                research_subsidies_18
                research_subsidies_19
                research_subsidies_20
                research_subsidies_21
                research_subsidies_22
                research_subsidies_23
                research_subsidies_24
                research_subsidies_25
                research_subsidies_26
                research_subsidies_27
                research_subsidies_28
                research_subsidies_29
                research_subsidies_30
                research_subsidies_31
                research_subsidies_32
                research_subsidies_33
                research_subsidies_34
                research_subsidies_35
                research_subsidies_36
                research_subsidies_37
                research_subsidies_38
                research_subsidies_39
                research_subsidies_40
                research_subsidies_41
                research_subsidies_42
                research_subsidies_43
                research_subsidies_44
                research_subsidies_45
                research_subsidies_46
                research_subsidies_47
                research_subsidies_48
                research_subsidies_49
                research_subsidies_50
                research_subsidies_51
                research_subsidies_52
                research_subsidies_53
                research_subsidies_54
                research_subsidies_55
                research_subsidies_56
                research_subsidies_57
                research_subsidies_58
                research_subsidies_59
                research_subsidies_60
                research_subsidies_61
                research_subsidies_62
                research_subsidies_63
                research_subsidies_64
                research_subsidies_65
                research_subsidies_66
                research_subsidies_67
                research_subsidies_68
                research_subsidies_69
                research_subsidies_70
                research_subsidies_71
                research_subsidies_72
                research_subsidies_73
                research_subsidies_74
                research_subsidies_75
                research_subsidies_76
                research_subsidies_77
                research_subsidies_78
                research_subsidies_79
                research_subsidies_80
                research_subsidies_81
                research_subsidies_82
                research_subsidies_83
                research_subsidies_84
                research_subsidies_85
                research_subsidies_86
                research_subsidies_87
                research_subsidies_88
                research_subsidies_89
                research_subsidies_90
                research_subsidies_91
                research_subsidies_92
                research_subsidies_93
                research_subsidies_94
                research_subsidies_95
                research_subsidies_96
                research_subsidies_97
                research_subsidies_98
                research_subsidies_99
            }
            if = {
                limit = {
                    check_variable = { research_spending_percentage < 100 }
                }
                meta_effect = {
                    text = {
                        add_ideas = research_subsidies_[NUM_LEVEL]
                    }
                    NUM_LEVEL = "[?research_spending_percentage|0]"
                }
            }
        #
    }
#

# Budget Changes
    change_upper_strata_income_tax = {
        #Scope: Country
        #Increases/Decreases the Upper Strata Income Tax level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { income_tax_upper_strata_percentage = percent_change_temp }
        budget_clamp = yes

        set_variable = { income_tax_upper_strata_percentage_actual = income_tax_upper_strata_percentage }
        multiply_variable = { income_tax_upper_strata_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
            investment_fund_update = yes
        }
        budget_update = yes
    }
    change_middle_strata_income_tax = {
        #Scope: Country
        #Increases/Decreases the Middle Strata Income Tax level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { income_tax_middle_strata_percentage = percent_change_temp }
        budget_clamp = yes

        set_variable = { income_tax_middle_strata_percentage_actual = income_tax_middle_strata_percentage }
        multiply_variable = { income_tax_middle_strata_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
            investment_fund_update = yes
        }
        budget_update = yes
    }
    change_lower_strata_income_tax = {
        #Scope: Country
        #Increases/Decreases the Lower Strata Income Tax level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { income_tax_lower_strata_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { income_tax_lower_strata_percentage_actual = income_tax_lower_strata_percentage }
        multiply_variable = { income_tax_lower_strata_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
            investment_fund_update = yes
        }
        budget_update = yes
    }

    change_sales_tax = {
        #Scope: Country
        #Increases/Decreases the Sales Tax level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { sales_tax_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { sales_tax_percentage_actual = sales_tax_percentage }
        multiply_variable = { sales_tax_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
        }
        budget_update = yes
    }
    change_corporate_tax = {
        #Scope: Country
        #Increases/Decreases the Corporate Tax level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { corporate_tax_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { corporate_tax_percentage_actual = corporate_tax_percentage }
        multiply_variable = { corporate_tax_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
            investment_fund_update = yes
        }
        budget_update = yes
    }
    change_import_tariff = {
        #Scope: Country
        #Increases/Decreases the Import Tariff level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { import_tariff_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { import_tariff_percentage_actual = import_tariff_percentage }
        multiply_variable = { import_tariff_percentage_actual = modifier@bureaucratic_efficiency_factor }

        trade_update_value = yes
        budget_update = yes
    }
    change_export_tariff = {
        #Scope: Country
        #Increases/Decreases the Export Tariff level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { export_tariff_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { export_tariff_percentage_actual = export_tariff_percentage }
        multiply_variable = { export_tariff_percentage_actual = modifier@bureaucratic_efficiency_factor }

        trade_update_value = yes
        budget_update = yes
    }

    change_military_spending = {
        #Scope: Country
        #Increases/Decreases the Military Spending level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { military_spending_percentage = percent_change_temp }
        budget_clamp = yes
        market_leader_check = yes
        if = {
            limit = {
                check_variable = { market_leader = THIS }
            }
            market_update = yes
        }
        budget_update = yes
    }
    change_intelligence_spending = {
        #Scope: Country
        #Increases/Decreases the Intelligence Spending level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { intelligence_spending_percentage = percent_change_temp }
        budget_clamp = yes
        budget_update = yes
    }
    change_construction_spending = {
        #Scope: Country
        #Increases/Decreases the Construction Spending level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { construction_spending_percentage = percent_change_temp }
        budget_clamp = yes

        every_controlled_state = {
            industries_update_construction_retooling = yes
        }
        proj_update = yes
        market_leader_check = yes
        if = {
            limit = {
                check_variable = { market_leader = THIS }
            }
            market_update = yes
        }
    }
    change_research_spending = {
        #Scope: Country
        #Increases/Decreases the Research Spending level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { research_spending_percentage = percent_change_temp }
        budget_update = yes
    }
    change_infrastructure_subsidy = {
        #Scope: Country
        #Increases/Decreases the Infrastructure Subsidy level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { infrastructure_subsidy_percentage = percent_change_temp }
        budget_update = yes
    }
    change_industrial_subsidy = {
        #Scope: Country
        #Increases/Decreases the Industrial Subsidy level
        #INPUT:
            #percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

        add_to_variable = { industrial_subsidy_percentage = percent_change_temp }
        budget_update = yes
    }
#

# Other
    create_pie_chart_revenue = {
        # this creates a pie chart of revenue - can be easily adapted to show anything that adds up to 100%
        # This code is much different from Yard's, but I'll credit him anyway
        # Country Scope

        set_variable = { revenue_piechart_income_percentage = income_tax_revenue }
        divide_variable = { revenue_piechart_income_percentage = revenue }
        set_variable = { revenue_piechart_corporate_percentage = corporate_tax_revenue }
        divide_variable = { revenue_piechart_corporate_percentage = revenue }
        set_variable = { revenue_piechart_sales_percentage = sales_tax_revenue }
        divide_variable = { revenue_piechart_sales_percentage = revenue }

        set_variable = { revenue_piechart_other_percentage = 1 }
        subtract_from_variable = { revenue_piechart_other_percentage = revenue_piechart_income_percentage }
        subtract_from_variable = { revenue_piechart_other_percentage = revenue_piechart_corporate_percentage }
        subtract_from_variable = { revenue_piechart_other_percentage = revenue_piechart_sales_percentage }

        clear_array = pie_chart_revenue_type
        resize_array = {
            array = pie_chart_revenue_type
            value = 1 # 1 is value for RGO frame
            size = 100 # 100 pieces, each percent is one piece
        }

        clear_temp_array = pie_slices_percentage
        add_to_temp_array = { pie_slices_percentage = 0 }
        add_to_temp_array = { pie_slices_percentage = revenue_piechart_other_percentage } # Black
        add_to_temp_array = { pie_slices_percentage = revenue_piechart_sales_percentage } # Yellow
        add_to_temp_array = { pie_slices_percentage = 0 } # light Red
        add_to_temp_array = { pie_slices_percentage = 0 } # Red
        add_to_temp_array = { pie_slices_percentage = 0 } # Dark Red
        add_to_temp_array = { pie_slices_percentage = 0 } # Darkest Red
        add_to_temp_array = { pie_slices_percentage = revenue_piechart_corporate_percentage } # Dark Blue
        add_to_temp_array = { pie_slices_percentage = revenue_piechart_income_percentage } # Green
        add_to_temp_array = { pie_slices_percentage = 0 } # Light Blue
        add_to_temp_array = { pie_slices_percentage = 0 } # Gray

        set_temp_variable = { total_temp = 0 }
        set_temp_variable = { largest = 0 }
        for_each_loop = {
            array = pie_slices_percentage
            index = rr
            if = {
                limit = {
                    check_variable = { pie_slices_percentage^rr > pie_slices_percentage^largest }
                }
                set_temp_variable = { largest = rr }
            }

            multiply_temp_variable = { pie_slices_percentage^rr = 100 }
            round_temp_variable = pie_slices_percentage^rr
            add_to_temp_variable = { total_temp = pie_slices_percentage^rr }
        }

        if = {
            limit = {
                NOT = { check_variable = { total_temp = 100 } }
            }
            add_to_temp_variable = { pie_slices_percentage^largest = 100 }
            subtract_from_temp_variable = { pie_slices_percentage^largest = total_temp }
        }

        set_temp_variable = { pie_pop = 0 }
        for_each_loop = {
            array = pie_slices_percentage
            index = rr
            value = vv

            set_variable = { last_idx = pie_pop }
            set_temp_variable = { pie_pop = vv }

            add_to_temp_variable = { pie_pop = last_idx }
            #subtract_from_temp_variable = { pie_pop = 1 }
            if = {
                limit = {
                    check_variable = { pie_pop > 100 }
                }
                set_temp_variable = { pie_pop = 100 }
            }
            for_loop_effect = {
                start = last_idx
                end = pie_pop
                set_variable = { pie_chart_revenue_type^v = rr }
            }
            set_variable = { last_idx = pie_pop }
        }
        clear_variable = last_idx

        add_to_variable = { update_state_econ_window = 1 }
    }
    create_pie_chart_spending = {
        # this creates a pie chart of spending - can be easily adapted to show anything that adds up to 100%
        # This code is much different from Yard's, but I'll credit him anyway
        # Country Scope

        set_variable = { spending_piechart_military_percentage = military_spending }
        add_to_variable = { spending_piechart_military_percentage = military_mandatory_spending }
        divide_variable = { spending_piechart_military_percentage = spending }
        set_variable = { spending_piechart_government_percentage = administration_spending }
        add_to_variable = { spending_piechart_government_percentage = research_spending }
        add_to_variable = { spending_piechart_government_percentage = public_enterprise_payroll_spending }
        add_to_variable = { spending_piechart_government_percentage = order_and_intel_spending }
        divide_variable = { spending_piechart_government_percentage = spending }
        set_variable = { spending_piechart_civilian_percentage = subsidies_spending }
        add_to_variable = { spending_piechart_civilian_percentage = construction_spending }
        add_to_variable = { spending_piechart_civilian_percentage = social_spending }
        divide_variable = { spending_piechart_civilian_percentage = spending }

        set_variable = { spending_piechart_other_percentage = 1 }
        subtract_from_variable = { spending_piechart_other_percentage = spending_piechart_military_percentage }
        subtract_from_variable = { spending_piechart_other_percentage = spending_piechart_government_percentage }
        subtract_from_variable = { spending_piechart_other_percentage = spending_piechart_civilian_percentage }

        clear_array = pie_chart_spending_type
        resize_array = {
            array = pie_chart_spending_type
            value = 1 # 1 is value for RGO frame
            size = 100 # 100 pieces, each percent is one piece
        }

        clear_temp_array = pie_slices_percentage
        add_to_temp_array = { pie_slices_percentage = 0 }
        add_to_temp_array = { pie_slices_percentage = spending_piechart_other_percentage } # Black
        add_to_temp_array = { pie_slices_percentage = spending_piechart_civilian_percentage } # Yellow
        add_to_temp_array = { pie_slices_percentage = 0 } # light Red
        add_to_temp_array = { pie_slices_percentage = spending_piechart_military_percentage } # Red
        add_to_temp_array = { pie_slices_percentage = 0 } # Dark Red
        add_to_temp_array = { pie_slices_percentage = 0 } # Darkest Red
        add_to_temp_array = { pie_slices_percentage = 0 } # Dark Blue
        add_to_temp_array = { pie_slices_percentage = 0 } # Green
        add_to_temp_array = { pie_slices_percentage = spending_piechart_government_percentage } # Light Blue
        add_to_temp_array = { pie_slices_percentage = 0 } # Gray

        set_temp_variable = { total_temp = 0 }
        set_temp_variable = { largest = 0 }
        for_each_loop = {
            array = pie_slices_percentage
            index = rr
            if = {
                limit = {
                    check_variable = { pie_slices_percentage^rr > pie_slices_percentage^largest }
                }
                set_temp_variable = { largest = rr }
            }

            multiply_temp_variable = { pie_slices_percentage^rr = 100 }
            round_temp_variable = pie_slices_percentage^rr
            add_to_temp_variable = { total_temp = pie_slices_percentage^rr }
        }

        if = {
            limit = {
                NOT = { check_variable = { total_temp = 100 } }
            }
            add_to_temp_variable = { pie_slices_percentage^largest = 100 }
            subtract_from_temp_variable = { pie_slices_percentage^largest = total_temp }
        }

        set_temp_variable = { pie_pop = 0 }
        for_each_loop = {
            array = pie_slices_percentage
            index = rr
            value = vv

            set_variable = { last_idx = pie_pop }
            set_temp_variable = { pie_pop = vv }

            add_to_temp_variable = { pie_pop = last_idx }
            #subtract_from_temp_variable = { pie_pop = 1 }
            if = {
                limit = {
                    check_variable = { pie_pop > 100 }
                }
                set_temp_variable = { pie_pop = 100 }
            }
            for_loop_effect = {
                start = last_idx
                end = pie_pop
                set_variable = { pie_chart_spending_type^v = rr }
            }
            set_variable = { last_idx = pie_pop }
        }
        clear_variable = last_idx

        add_to_variable = { update_state_econ_window = 1 }
    }
#